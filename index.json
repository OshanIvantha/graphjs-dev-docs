[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/charts/chart-type.js",
    "content": "import {Enum} from 'enumify'\n\n/**\n * Define the types of charts\n *\n * LINE_CHART |\n * SIMPLE_XY_LINE_CHART |\n * STEP_CHART |\n * BAR_CHART |\n * PIE_CHART |\n * COMBINATION_CHART |\n * MULTIPLE_XY_LINE_CHART |\n * AREA_CHART |\n * STACKED_BAR_CHART |\n * DONUT_CHART |\n * SPLINE_CHART |\n * LINE_CHART_WITH_REGIONS |\n * STACKED_AREA_CHART |\n * SCATTER_PLOT |\n * GUAGE_CHART |\n */\nexport default class ChartType extends Enum {\n}\n\nChartType.initEnum([\n\t'LINE_CHART',\n\t'SIMPLE_XY_LINE_CHART',\n\t'STEP_CHART',\n\t'BAR_CHART',\n\t'PIE_CHART',\n\t'COMBINATION_CHART',\n\t'MULTIPLE_XY_LINE_CHART',\n\t'AREA_CHART',\n\t'STACKED_BAR_CHART',\n\t'DONUT_CHART',\n\t'SPLINE_CHART',\n\t'LINE_CHART_WITH_REGIONS',\n\t'STACKED_AREA_CHART',\n\t'SCATTER_PLOT',\n\t'GAUGE_CHART'\n])",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/chart-type.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "ChartType",
    "memberof": "src/charts/chart-type.js",
    "static": true,
    "longname": "src/charts/chart-type.js~ChartType",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/chart-type.js",
    "importStyle": "ChartType",
    "description": "Define the types of charts\n\nLINE_CHART |\nSIMPLE_XY_LINE_CHART |\nSTEP_CHART |\nBAR_CHART |\nPIE_CHART |\nCOMBINATION_CHART |\nMULTIPLE_XY_LINE_CHART |\nAREA_CHART |\nSTACKED_BAR_CHART |\nDONUT_CHART |\nSPLINE_CHART |\nLINE_CHART_WITH_REGIONS |\nSTACKED_AREA_CHART |\nSCATTER_PLOT |\nGUAGE_CHART |",
    "lineNumber": 22,
    "interface": false,
    "extends": [
      "enumify~Enum"
    ]
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/charts/chart.js",
    "content": "export default class Chart {\n\n\t/**\n\t * Creates an instance of the Chart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tthis._data = data\n\n\t\t// Define output JSON\n\t\tthis._outputJson = {\n\t\t\t'size': {\n\t\t\t\t'height': undefined,\n\t\t\t\t'width': undefined\n\t\t\t},\n\t\t\t'data': {\n\t\t\t\t'x': undefined,\n\t\t\t\t'xs': {},\n\t\t\t\t'columns': [],\n\t\t\t\t'names': {},\n\t\t\t\t'types': {},\n\t\t\t\t'groups': [],\n\t\t\t\t'type': undefined,\n\t\t\t\t'labels': false\n\t\t\t},\n\t\t\t'point': {\n\t\t\t\t'show': true\n\t\t\t},\n\t\t\t'axis': {\n\t\t\t\t'rotated': false,\n\t\t\t\t'x': {\n\t\t\t\t\t'label': undefined,\n\t\t\t\t\t'max': undefined,\n\t\t\t\t\t'min': undefined\n\t\t\t\t},\n\t\t\t\t'y': {\n\t\t\t\t\t'label': undefined,\n\t\t\t\t\t'max': undefined,\n\t\t\t\t\t'min': undefined\n\t\t\t\t}\n\t\t\t},\n\t\t\t'grid': {\n\t\t\t\t'x': {\n\t\t\t\t\t'show': false,\n\t\t\t\t\t'lines': []\n\t\t\t\t},\n\t\t\t\t'y': {\n\t\t\t\t\t'show': false,\n\t\t\t\t\t'lines': []\n\t\t\t\t}\n\t\t\t},\n\t\t\t'legend': {\n\t\t\t\t'show': true,\n\t\t\t\t'position': 'bottom'\n\t\t\t},\n\t\t\t'tooltip': {\n\t\t\t\t'show': true,\n\t\t\t\t'grouped': true\n\t\t\t},\n\t\t\t'subchart': {\n\t\t\t\t'show': false\n\t\t\t},\n\t\t\t'zoom': {\n\t\t\t\t'enabled': false\n\t\t\t},\n\t\t\t'bar': {\n\t\t\t\t'width': {\n\t\t\t\t\t'ratio': undefined\n\t\t\t\t}\n\t\t\t},\n\t\t\t'donut': {\n\t\t\t\t'title': undefined\n\t\t\t}\n\t\t}\n\n\t\t// Add _data\n\t\tlet dataJson = JSON.parse(this._data)\n\t\tfor (let i in dataJson) {\n\t\t\tthis._outputJson.data.columns.push([i, ...dataJson[i]])\n\t\t}\n\t}\n\n\t/**\n\t * Alter the parameters of the charts using the provided grammar.\n\t * @param {string} grammar - Simple grammar string describing the charts.\n\t * @returns {boolean} - Returns true if the grammar is parsed.\n\t */\n\tdo(grammar) {\n\t\tif (grammar.match(new RegExp('(show|hide) grid [xXyY]'))) {\n\t\t\tlet option = grammar.match(new RegExp('(show|hide)'))[0]\n\t\t\tlet axis = grammar.match(new RegExp('[xXyY]'))[0]\n\t\t\tif (axis.toLowerCase() === 'x') {\n\t\t\t\tthis._outputJson.grid.x.show = (option === 'show')\n\t\t\t} else {\n\t\t\t\tthis._outputJson.grid.y.show = (option === 'show')\n\t\t\t}\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('set gridline [xXyY] at [\\\\d]+ as [0-9a-zA-Z\\\\-]+'))) {\n\t\t\tlet axis = grammar.match(new RegExp('gridline [xXyY] at'))[0].split(' ')[1]\n\t\t\tlet position = grammar.match(new RegExp('at [\\\\d]+ as'))[0].split(' ')[1]\n\t\t\tlet label = grammar.match(new RegExp('as [0-9a-zA-Z\\\\-]+'))[0].split(' ')[1]\n\t\t\tif (axis.toLowerCase() === 'x') {\n\t\t\t\tthis._outputJson.grid.x.lines.push({\n\t\t\t\t\t'value': Number(position),\n\t\t\t\t\t'text': label\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tthis._outputJson.grid.y.lines.push({\n\t\t\t\t\t'value': Number(position),\n\t\t\t\t\t'text': label\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('set [0-9a-zA-Z\\\\-]+ data label as [0-9a-zA-Z\\\\-]+'))) {\n\t\t\tlet dataColumn = grammar.match(new RegExp('set [0-9a-zA-Z\\\\-]+ data'))[0].split(' ')[1]\n\t\t\tlet label = grammar.match(new RegExp('as [0-9a-zA-Z\\\\-]+'))[0].split(' ')[1]\n\t\t\tthis._outputJson.data.names[dataColumn] = label\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('set [xXyY] axis label as [0-9a-zA-Z\\\\-]+'))) {\n\t\t\tlet axis = grammar.match(new RegExp('[xXyY]'))[0]\n\t\t\tlet label = grammar.match(new RegExp('as [0-9a-zA-Z\\\\-]+'))[0].split(' ')[1]\n\t\t\tif (axis.toLowerCase() === 'x') {\n\t\t\t\tthis._outputJson.axis.x.label = label\n\t\t\t} else {\n\t\t\t\tthis._outputJson.axis.y.label = label\n\t\t\t}\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('set [xXyY] axis (max|min) as [-]?[\\\\d]+'))) {\n\t\t\tlet axis = grammar.match(new RegExp('[xXyY]'))[0]\n\t\t\tlet margin = grammar.match(new RegExp('axis (max|min) as'))[0].split(' ')[1]\n\t\t\tlet value = grammar.match(new RegExp('as [-]?[\\\\d]+'))[0].split(' ')[1]\n\t\t\tif (axis.toLowerCase() === 'x') {\n\t\t\t\tif (margin.toLowerCase() === 'max') {\n\t\t\t\t\tthis._outputJson.axis.x.max = Number(value)\n\t\t\t\t} else {\n\t\t\t\t\tthis._outputJson.axis.x.min = Number(value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (margin.toLowerCase() === 'max') {\n\t\t\t\t\tthis._outputJson.axis.y.max = Number(value)\n\t\t\t\t} else {\n\t\t\t\t\tthis._outputJson.axis.y.min = Number(value)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('(show|hide) tooltip'))) {\n\t\t\tlet option = grammar.match(new RegExp('(show|hide)'))[0]\n\t\t\tthis._outputJson.tooltip.show = (option === 'show')\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('(group|ungroup) tooltip'))) {\n\t\t\tlet option = grammar.match(new RegExp('(group|ungroup)'))[0]\n\t\t\tthis._outputJson.tooltip.grouped = (option === 'group')\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('(show|hide) points'))) {\n\t\t\tlet option = grammar.match(new RegExp('(show|hide)'))[0]\n\t\t\tthis._outputJson.point.show = (option === 'show')\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('(show|hide) data labels'))) {\n\t\t\tlet option = grammar.match(new RegExp('(show|hide)'))[0]\n\t\t\tthis._outputJson.data.labels = (option === 'show')\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('(show|hide) legend'))) {\n\t\t\tlet option = grammar.match(new RegExp('(show|hide)'))[0]\n\t\t\tthis._outputJson.legend.show = (option === 'show')\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('(show|hide) subchart'))) {\n\t\t\tlet option = grammar.match(new RegExp('(show|hide)'))[0]\n\t\t\tthis._outputJson.subchart.show = (option === 'show')\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('(enable|disable) zoom'))) {\n\t\t\tlet option = grammar.match(new RegExp('(enable|disable)'))[0]\n\t\t\tthis._outputJson.zoom.enabled = (option === 'enable')\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('(enable|disable) rotate'))) {\n\t\t\tlet option = grammar.match(new RegExp('(enable|disable)'))[0]\n\t\t\tthis._outputJson.axis.rotated = (option === 'enable')\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('move legend to (right|bottom)'))) {\n\t\t\tlet option = grammar.match(new RegExp('(left|right|top|bottom)'))[0]\n\t\t\tthis._outputJson.legend.position = option\n\t\t\treturn true\n\t\t} else if (grammar.match(new RegExp('set (height|width) as [\\\\d]+'))) {\n\t\t\tlet option = grammar.match(new RegExp('(height|width)'))[0]\n\t\t\tlet value = grammar.match(new RegExp('as [\\\\d]+'))[0].split(' ')[1]\n\t\t\tif (option.toLowerCase() === 'height') {\n\t\t\t\tthis._outputJson.size.height = Number(value)\n\t\t\t} else {\n\t\t\t\tthis._outputJson.size.width = Number(value)\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\t\telse {\n\t\t\treturn false\n\t\t}\n\t}\n\n\t/**\n\t * Return the JSON output string of the constructed charts.\n\t * @returns {string}\n\t */\n\tgenerateJson() {\n\t\treturn this._outputJson\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "Chart",
    "memberof": "src/charts/chart.js",
    "static": true,
    "longname": "src/charts/chart.js~Chart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/chart.js",
    "importStyle": "Chart",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/chart.js~Chart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/chart.js~Chart#constructor",
    "access": "public",
    "description": "Creates an instance of the Chart class",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_data",
    "memberof": "src/charts/chart.js~Chart",
    "static": false,
    "longname": "src/charts/chart.js~Chart#_data",
    "access": "private",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_outputJson",
    "memberof": "src/charts/chart.js~Chart",
    "static": false,
    "longname": "src/charts/chart.js~Chart#_outputJson",
    "access": "private",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"size\": *, \"data\": *, \"point\": *, \"axis\": *, \"grid\": *, \"legend\": *, \"tooltip\": *, \"subchart\": *, \"zoom\": *, \"bar\": *, \"donut\": *}"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "do",
    "memberof": "src/charts/chart.js~Chart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/chart.js~Chart#do",
    "access": "public",
    "description": "Alter the parameters of the charts using the provided grammar.",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Returns true if the grammar is parsed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": "Simple grammar string describing the charts."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if the grammar is parsed."
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "generateJson",
    "memberof": "src/charts/chart.js~Chart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/chart.js~Chart#generateJson",
    "access": "public",
    "description": "Return the JSON output string of the constructed charts.",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/charts/types/area-chart.js",
    "content": "import Chart from '../chart'\nimport InvalidGrammarError from '../../errors/invalid-grammar-error'\n\n/**\n * Represents an Area Chart.\n */\nexport default class AreaChart extends Chart {\n\n\t/**\n\t * Creates an instance of the AreaChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\t}\n\n\t/**\n\t * Alter the parameters of the chart using the provided grammar.\n\t * @param {string} grammar - Simple grammar string describing the chart.\n\t * @returns {boolean} - Returns true if the grammar is parsed.\n\t */\n\tdo(grammar) {\n\t\tif (!super.do(grammar)) {\n\t\t\tif (grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as area-spline'))) {\n\t\t\t\tlet areaSplineDataLabel = grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as area-spline'))[0].split(' ')[1]\n\t\t\t\tthis._outputJson.data.types[areaSplineDataLabel] = 'area-spline'\n\t\t\t\treturn true\n\t\t\t} else if (grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as area'))) {\n\t\t\t\tlet areaDataLabel = grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as area'))[0].split(' ')[1]\n\t\t\t\tthis._outputJson.data.types[areaDataLabel] = 'area'\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tthrow new InvalidGrammarError()\n\t\t\t}\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/area-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "class",
    "name": "AreaChart",
    "memberof": "src/charts/types/area-chart.js",
    "static": true,
    "longname": "src/charts/types/area-chart.js~AreaChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/area-chart.js",
    "importStyle": "AreaChart",
    "description": "Represents an Area Chart.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 59,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/area-chart.js~AreaChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/area-chart.js~AreaChart#constructor",
    "access": "public",
    "description": "Creates an instance of the AreaChart class",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "do",
    "memberof": "src/charts/types/area-chart.js~AreaChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/area-chart.js~AreaChart#do",
    "access": "public",
    "description": "Alter the parameters of the chart using the provided grammar.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Returns true if the grammar is parsed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": "Simple grammar string describing the chart."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if the grammar is parsed."
    }
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/charts/types/bar-chart.js",
    "content": "import Chart from '../chart'\nimport InvalidGrammarError from '../../errors/invalid-grammar-error'\n\n/**\n * Represents a Bar Chart.\n */\nexport default class BarChart extends Chart {\n\n\t/**\n\t * Creates an instance of the BarChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\n\t\t// Set to bar charts\n\t\tthis._outputJson.data.type = 'bar'\n\t}\n\n\t/**\n\t * Alter the parameters of the chart using the provided grammar.\n\t * @param {string} grammar - Simple grammar string describing the chart.\n\t * @returns {boolean} - Returns true if the grammar is parsed.\n\t */\n\tdo(grammar) {\n\t\tif (!super.do(grammar)) {\n\t\t\tif (grammar.match(new RegExp('set bar width as \\\\d+(\\\\.\\\\d+)*( pixels)?'))) {\n\t\t\t\tlet widthValue = grammar.match(new RegExp('set bar width as \\\\d+(\\\\.\\\\d+)*'))[0].split(' ')[4]\n\t\t\t\tif (grammar.match(new RegExp('pixels'))) {\n\t\t\t\t\tlet barWidthPixels = Number(widthValue)\n\t\t\t\t\tthis._outputJson['bar'] = {\n\t\t\t\t\t\t'width': barWidthPixels\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet barWidthRatio = Number(widthValue)\n\t\t\t\t\tthis._outputJson['bar'] = {\n\t\t\t\t\t\t'width': {\n\t\t\t\t\t\t\t'ratio': barWidthRatio\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tthrow new InvalidGrammarError()\n\t\t\t}\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/bar-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "class",
    "name": "BarChart",
    "memberof": "src/charts/types/bar-chart.js",
    "static": true,
    "longname": "src/charts/types/bar-chart.js~BarChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/bar-chart.js",
    "importStyle": "BarChart",
    "description": "Represents a Bar Chart.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 63,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/bar-chart.js~BarChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/bar-chart.js~BarChart#constructor",
    "access": "public",
    "description": "Creates an instance of the BarChart class",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "do",
    "memberof": "src/charts/types/bar-chart.js~BarChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/bar-chart.js~BarChart#do",
    "access": "public",
    "description": "Alter the parameters of the chart using the provided grammar.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Returns true if the grammar is parsed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": "Simple grammar string describing the chart."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if the grammar is parsed."
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/charts/types/combination-chart.js",
    "content": "import Chart from '../chart'\n\n/**\n * Represents a Combination Chart.\n */\nexport default class CombinationChart extends Chart {\n\n\t/**\n\t * Creates an instance of the CombinationChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/combination-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "class",
    "name": "CombinationChart",
    "memberof": "src/charts/types/combination-chart.js",
    "static": true,
    "longname": "src/charts/types/combination-chart.js~CombinationChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/combination-chart.js",
    "importStyle": "CombinationChart",
    "description": "Represents a Combination Chart.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 67,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/combination-chart.js~CombinationChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/combination-chart.js~CombinationChart#constructor",
    "access": "public",
    "description": "Creates an instance of the CombinationChart class",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/charts/types/donut-chart.js",
    "content": "import Chart from '../chart'\nimport InvalidGrammarError from '../../errors/invalid-grammar-error'\n\n/**\n * Represents a Donut Chart.\n */\nexport default class DonutChart extends Chart {\n\n\t/**\n\t * Creates an instance of the DonutChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\n\t\t// Set charts types as Donut Chart\n\t\tthis._outputJson.data.type = 'donut'\n\t}\n\n\t/**\n\t * Alter the parameters of the chart using the provided grammar.\n\t * @param {string} grammar - Simple grammar string describing the chart.\n\t * @returns {boolean} - Returns true if the grammar is parsed.\n\t */\n\tdo(grammar) {\n\t\tif (!super.do(grammar)) {\n\t\t\tif (grammar.match(new RegExp('set title as [0-9a-zA-Z\\\\-]+'))) {\n\t\t\t\tlet chartTitle = grammar.match(new RegExp('as [0-9a-zA-Z\\\\-]+'))[0].split(' ')[1]\n\t\t\t\tthis._outputJson.donut.title = chartTitle\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tthrow new InvalidGrammarError()\n\t\t\t}\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/donut-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "class",
    "name": "DonutChart",
    "memberof": "src/charts/types/donut-chart.js",
    "static": true,
    "longname": "src/charts/types/donut-chart.js~DonutChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/donut-chart.js",
    "importStyle": "DonutChart",
    "description": "Represents a Donut Chart.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 70,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/donut-chart.js~DonutChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/donut-chart.js~DonutChart#constructor",
    "access": "public",
    "description": "Creates an instance of the DonutChart class",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "do",
    "memberof": "src/charts/types/donut-chart.js~DonutChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/donut-chart.js~DonutChart#do",
    "access": "public",
    "description": "Alter the parameters of the chart using the provided grammar.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Returns true if the grammar is parsed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": "Simple grammar string describing the chart."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if the grammar is parsed."
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/charts/types/gauge-chart.js",
    "content": "import Chart from '../chart'\n\n/**\n * Represents a Gauge Chart.\n */\nexport default class GaugeChart extends Chart {\n\n\t/**\n\t * Creates an instance of the GaugeChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/gauge-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "GaugeChart",
    "memberof": "src/charts/types/gauge-chart.js",
    "static": true,
    "longname": "src/charts/types/gauge-chart.js~GaugeChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/gauge-chart.js",
    "importStyle": "GaugeChart",
    "description": "Represents a Gauge Chart.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 74,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/gauge-chart.js~GaugeChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/gauge-chart.js~GaugeChart#constructor",
    "access": "public",
    "description": "Creates an instance of the GaugeChart class",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/charts/types/line-chart-with-regions.js",
    "content": "import Chart from '../chart'\n\n/**\n * Represents a Line Chart with Regions.\n */\nexport default class LineChartWithRegions extends Chart {\n\n\t/**\n\t * Creates an instance of the LineChartWithRegions class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/line-chart-with-regions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "class",
    "name": "LineChartWithRegions",
    "memberof": "src/charts/types/line-chart-with-regions.js",
    "static": true,
    "longname": "src/charts/types/line-chart-with-regions.js~LineChartWithRegions",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/line-chart-with-regions.js",
    "importStyle": "LineChartWithRegions",
    "description": "Represents a Line Chart with Regions.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/line-chart-with-regions.js~LineChartWithRegions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/line-chart-with-regions.js~LineChartWithRegions#constructor",
    "access": "public",
    "description": "Creates an instance of the LineChartWithRegions class",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/charts/types/line-chart.js",
    "content": "import Chart from '../chart'\n\n/**\n * Represents a Line Chart.\n */\nexport default class LineChart extends Chart {\n\n\t/**\n\t * Creates an instance of the LineChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\t}\n\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/line-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "class",
    "name": "LineChart",
    "memberof": "src/charts/types/line-chart.js",
    "static": true,
    "longname": "src/charts/types/line-chart.js~LineChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/line-chart.js",
    "importStyle": "LineChart",
    "description": "Represents a Line Chart.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 80,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/line-chart.js~LineChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/line-chart.js~LineChart#constructor",
    "access": "public",
    "description": "Creates an instance of the LineChart class",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/charts/types/multiple-xy-line-chart.js",
    "content": "import Chart from '../chart'\nimport InvalidGrammarError from '../../errors/invalid-grammar-error'\n\n/**\n * Represents a Multiple XY line Chart.\n */\nexport default class MultipleXYLineChart extends Chart {\n\n\t/**\n\t * Creates an instance of the MultipleXYLineChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\t}\n\n\t/**\n\t * Alter the parameters of the chart using the provided grammar.\n\t * @param {string} grammar - Simple grammar string describing the chart.\n\t * @returns {boolean} - Returns true if the grammar is parsed.\n\t */\n\tdo(grammar) {\n\t\tif (!super.do(grammar)) {\n\t\t\tif (grammar.match(new RegExp('set [0-9a-zA-Z\\\\-]+ for [0-9a-zA-Z\\\\-]+'))) {\n\t\t\t\tlet p1 = grammar.match(new RegExp('set [0-9a-zA-Z\\\\-]+ for'))[0].split(' ')[1]\n\t\t\t\tlet p2 = grammar.match(new RegExp('for [0-9a-zA-Z\\\\-]+'))[0].split(' ')[1]\n\t\t\t\tthis._outputJson.data.xs[p1] = p2\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tthrow new InvalidGrammarError()\n\t\t\t}\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/multiple-xy-line-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "class",
    "name": "MultipleXYLineChart",
    "memberof": "src/charts/types/multiple-xy-line-chart.js",
    "static": true,
    "longname": "src/charts/types/multiple-xy-line-chart.js~MultipleXYLineChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/multiple-xy-line-chart.js",
    "importStyle": "MultipleXYLineChart",
    "description": "Represents a Multiple XY line Chart.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 83,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/multiple-xy-line-chart.js~MultipleXYLineChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/multiple-xy-line-chart.js~MultipleXYLineChart#constructor",
    "access": "public",
    "description": "Creates an instance of the MultipleXYLineChart class",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "do",
    "memberof": "src/charts/types/multiple-xy-line-chart.js~MultipleXYLineChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/multiple-xy-line-chart.js~MultipleXYLineChart#do",
    "access": "public",
    "description": "Alter the parameters of the chart using the provided grammar.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Returns true if the grammar is parsed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": "Simple grammar string describing the chart."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if the grammar is parsed."
    }
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/charts/types/pie-chart.js",
    "content": "import Chart from '../chart'\n\n/**\n * Represents a Pie Chart.\n */\nexport default class PieChart extends Chart {\n\n\t/**\n\t * Creates an instance of the PieChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\n\t\t// Set charts types as Pie\n\t\tthis._outputJson.data.type = 'pie'\n\t}\n\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/pie-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "class",
    "name": "PieChart",
    "memberof": "src/charts/types/pie-chart.js",
    "static": true,
    "longname": "src/charts/types/pie-chart.js~PieChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/pie-chart.js",
    "importStyle": "PieChart",
    "description": "Represents a Pie Chart.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 87,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/pie-chart.js~PieChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/pie-chart.js~PieChart#constructor",
    "access": "public",
    "description": "Creates an instance of the PieChart class",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/charts/types/scatter-plot.js",
    "content": "import Chart from '../chart'\n\n/**\n * Represents a Scatter Plot.\n */\nexport default class ScatterPlot extends Chart {\n\n\t/**\n\t * Creates an instance of the ScatterPlot class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\n\t\t// Set charts types as Scatter Plot\n\t\tthis._outputJson.data.type = 'scatter'\n\t}\n\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/scatter-plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "class",
    "name": "ScatterPlot",
    "memberof": "src/charts/types/scatter-plot.js",
    "static": true,
    "longname": "src/charts/types/scatter-plot.js~ScatterPlot",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/scatter-plot.js",
    "importStyle": "ScatterPlot",
    "description": "Represents a Scatter Plot.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 90,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/scatter-plot.js~ScatterPlot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/scatter-plot.js~ScatterPlot#constructor",
    "access": "public",
    "description": "Creates an instance of the ScatterPlot class",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/charts/types/simple-xy-line-chart.js",
    "content": "import Chart from '../chart'\nimport InvalidGrammarError from '../../errors/invalid-grammar-error'\n\n/**\n * Represents a Simple XY Line Chart.\n */\nexport default class SimpleXYLineChart extends Chart {\n\n\t/**\n\t * Creates an instance of the SimpleXYLineChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\t}\n\n\t/**\n\t * Alter the parameters of the chart using the provided grammar.\n\t * @param {string} grammar - Simple grammar string describing the chart.\n\t * @returns {boolean} - Returns true if the grammar is parsed.\n\t */\n\tdo(grammar) {\n\t\tif (!super.do(grammar)) {\n\t\t\tif (grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as [xX]'))) {\n\t\t\t\tlet xAxisDataLabel = grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as'))[0].split(' ')[1]\n\t\t\t\tthis._outputJson.data.x = xAxisDataLabel\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tthrow new InvalidGrammarError()\n\t\t\t}\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/simple-xy-line-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "class",
    "name": "SimpleXYLineChart",
    "memberof": "src/charts/types/simple-xy-line-chart.js",
    "static": true,
    "longname": "src/charts/types/simple-xy-line-chart.js~SimpleXYLineChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/simple-xy-line-chart.js",
    "importStyle": "SimpleXYLineChart",
    "description": "Represents a Simple XY Line Chart.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 93,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/simple-xy-line-chart.js~SimpleXYLineChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/simple-xy-line-chart.js~SimpleXYLineChart#constructor",
    "access": "public",
    "description": "Creates an instance of the SimpleXYLineChart class",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "do",
    "memberof": "src/charts/types/simple-xy-line-chart.js~SimpleXYLineChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/simple-xy-line-chart.js~SimpleXYLineChart#do",
    "access": "public",
    "description": "Alter the parameters of the chart using the provided grammar.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Returns true if the grammar is parsed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": "Simple grammar string describing the chart."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if the grammar is parsed."
    }
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "src/charts/types/spline-chart.js",
    "content": "import Chart from '../chart'\n\n/**\n * Represents a Spline Chart.\n */\nexport default class SplineChart extends Chart {\n\n\t/**\n\t * Creates an instance of the SplineChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\n\t\t// Set types as Spline Chart\n\t\tthis._outputJson.data.type = 'spline'\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/spline-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "class",
    "name": "SplineChart",
    "memberof": "src/charts/types/spline-chart.js",
    "static": true,
    "longname": "src/charts/types/spline-chart.js~SplineChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/spline-chart.js",
    "importStyle": "SplineChart",
    "description": "Represents a Spline Chart.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/spline-chart.js~SplineChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/spline-chart.js~SplineChart#constructor",
    "access": "public",
    "description": "Creates an instance of the SplineChart class",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/charts/types/stacked-area-chart.js",
    "content": "import Chart from '../chart'\nimport InvalidGrammarError from '../../errors/invalid-grammar-error'\n\n/**\n * Represents a Stacked Area Chart.\n */\nexport default class StackedAreaChart extends Chart {\n\n\t/**\n\t * Creates an instance of the StackedAreaChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\t}\n\n\t/**\n\t * Alter the parameters of the chart using the provided grammar.\n\t * @param {string} grammar - Simple grammar string describing the chart.\n\t * @returns {boolean} - Returns true if the grammar is parsed.\n\t */\n\tdo(grammar) {\n\t\tif (!super.do(grammar)) {\n\t\t\tif (grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as area-spline'))) {\n\t\t\t\tlet areaSplineDataLabel = grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as area-spline'))[0].split(' ')[1]\n\t\t\t\tthis._outputJson.data.types[areaSplineDataLabel] = 'area-spline'\n\t\t\t\treturn true\n\t\t\t} else if (grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as area'))) {\n\t\t\t\tlet areaDataLabel = grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as area'))[0].split(' ')[1]\n\t\t\t\tthis._outputJson.data.types[areaDataLabel] = 'area'\n\t\t\t\treturn true\n\t\t\t} else if (grammar.match(new RegExp('group [0-9a-zA-Z\\\\-]+[\\\\s]*(,[\\\\s]*)+[0-9a-zA-Z\\\\-]+'))) {\n\t\t\t\tlet labelList = grammar.match(new RegExp(' [0-9a-zA-Z\\\\-]+[\\\\s]*(,[\\\\s]*)+[0-9a-zA-Z\\\\-]+'))[0].split(',')\n\t\t\t\tlabelList = labelList.map(e => e.trim())\n\t\t\t\tthis._outputJson.data.groups.push(labelList)\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tthrow new InvalidGrammarError()\n\t\t\t}\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/stacked-area-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "class",
    "name": "StackedAreaChart",
    "memberof": "src/charts/types/stacked-area-chart.js",
    "static": true,
    "longname": "src/charts/types/stacked-area-chart.js~StackedAreaChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/stacked-area-chart.js",
    "importStyle": "StackedAreaChart",
    "description": "Represents a Stacked Area Chart.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 100,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/stacked-area-chart.js~StackedAreaChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/stacked-area-chart.js~StackedAreaChart#constructor",
    "access": "public",
    "description": "Creates an instance of the StackedAreaChart class",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "do",
    "memberof": "src/charts/types/stacked-area-chart.js~StackedAreaChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/stacked-area-chart.js~StackedAreaChart#do",
    "access": "public",
    "description": "Alter the parameters of the chart using the provided grammar.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Returns true if the grammar is parsed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": "Simple grammar string describing the chart."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if the grammar is parsed."
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/charts/types/stacked-bar-chart.js",
    "content": "import Chart from '../chart'\nimport InvalidGrammarError from '../../errors/invalid-grammar-error'\n\n/**\n * Represents a Stacked Bar Chart.\n */\nexport default class StackedBarChart extends Chart {\n\n\t/**\n\t * Creates an instance of the StackedBarChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\n\t\t// Set types as Bar Chart\n\t\tthis._outputJson.data.type = 'bar'\n\t}\n\n\t/**\n\t * Alter the parameters of the chart using the provided grammar.\n\t * @param {string} grammar - Simple grammar string describing the chart.\n\t * @returns {boolean} - Returns true if the grammar is parsed.\n\t */\n\tdo(grammar) {\n\t\tif (!super.do(grammar)) {\n\t\t\tif (grammar.match(new RegExp('group [0-9a-zA-Z\\\\-]+[\\\\s]*(,[\\\\s]*)+[0-9a-zA-Z\\\\-]+'))) {\n\t\t\t\tlet labelList = grammar.match(new RegExp(' [0-9a-zA-Z\\\\-]+[\\\\s]*(,[\\\\s]*)+[0-9a-zA-Z\\\\-]+'))[0].split(',')\n\t\t\t\tlabelList = labelList.map(e => e.trim())\n\t\t\t\tthis._outputJson.data.groups.push(labelList)\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tthrow new InvalidGrammarError()\n\t\t\t}\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/stacked-bar-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "class",
    "name": "StackedBarChart",
    "memberof": "src/charts/types/stacked-bar-chart.js",
    "static": true,
    "longname": "src/charts/types/stacked-bar-chart.js~StackedBarChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/stacked-bar-chart.js",
    "importStyle": "StackedBarChart",
    "description": "Represents a Stacked Bar Chart.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 104,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/stacked-bar-chart.js~StackedBarChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/stacked-bar-chart.js~StackedBarChart#constructor",
    "access": "public",
    "description": "Creates an instance of the StackedBarChart class",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "do",
    "memberof": "src/charts/types/stacked-bar-chart.js~StackedBarChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/stacked-bar-chart.js~StackedBarChart#do",
    "access": "public",
    "description": "Alter the parameters of the chart using the provided grammar.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Returns true if the grammar is parsed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": "Simple grammar string describing the chart."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if the grammar is parsed."
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "src/charts/types/step-chart.js",
    "content": "import Chart from '../chart'\nimport InvalidGrammarError from '../../errors/invalid-grammar-error'\n\n/**\n * Represents a Step Chart.\n */\nexport default class StepChart extends Chart {\n\n\t/**\n\t * Creates an instance of the StepChart class\n\t * @param {string} data - JSON string containing the data columns.\n\t */\n\tconstructor(data) {\n\t\tsuper(data)\n\t}\n\n\t/**\n\t * Alter the parameters of the chart using the provided grammar.\n\t * @param {string} grammar - Simple grammar string describing the chart.\n\t * @returns {boolean} - Returns true if the grammar is parsed.\n\t */\n\tdo(grammar) {\n\t\tif (!super.do(grammar)) {\n\t\t\tif (grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as area-step'))) {\n\t\t\t\tthis._areaStepDataLabel = grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as area-step'))[0].split(' ')[1]\n\t\t\t\tthis._outputJson.data.types[this._areaStepDataLabel] = 'area-step'\n\t\t\t\treturn true\n\t\t\t} else if (grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as step'))) {\n\t\t\t\tthis._stepDataLabel = grammar.match(new RegExp('where [0-9a-zA-Z\\\\-]+ as step'))[0].split(' ')[1]\n\t\t\t\tthis._outputJson.data.types[this._stepDataLabel] = 'step'\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tthrow new InvalidGrammarError()\n\t\t\t}\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/charts/types/step-chart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "class",
    "name": "StepChart",
    "memberof": "src/charts/types/step-chart.js",
    "static": true,
    "longname": "src/charts/types/step-chart.js~StepChart",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/charts/types/step-chart.js",
    "importStyle": "StepChart",
    "description": "Represents a Step Chart.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/charts/chart.js~Chart"
    ]
  },
  {
    "__docId__": 108,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/charts/types/step-chart.js~StepChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/step-chart.js~StepChart#constructor",
    "access": "public",
    "description": "Creates an instance of the StepChart class",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON string containing the data columns."
      }
    ]
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "do",
    "memberof": "src/charts/types/step-chart.js~StepChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/charts/types/step-chart.js~StepChart#do",
    "access": "public",
    "description": "Alter the parameters of the chart using the provided grammar.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Returns true if the grammar is parsed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": "Simple grammar string describing the chart."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if the grammar is parsed."
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "_areaStepDataLabel",
    "memberof": "src/charts/types/step-chart.js~StepChart",
    "static": false,
    "longname": "src/charts/types/step-chart.js~StepChart#_areaStepDataLabel",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "_stepDataLabel",
    "memberof": "src/charts/types/step-chart.js~StepChart",
    "static": false,
    "longname": "src/charts/types/step-chart.js~StepChart#_stepDataLabel",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "src/errors/invalid-grammar-error.js",
    "content": "import ExtendableError from 'es6-error'\n\n/**\n * Thrown when the grammar is invalid.\n */\nexport default class InvalidGrammarError extends ExtendableError {\n\n\t/**\n\t * Creates an instance of InvalidGrammarError.\n\t * @param {string} message - Error message.\n\t */\n\tconstructor(message = 'Invalid grammar') {\n\t\tsuper(message)\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/errors/invalid-grammar-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "class",
    "name": "InvalidGrammarError",
    "memberof": "src/errors/invalid-grammar-error.js",
    "static": true,
    "longname": "src/errors/invalid-grammar-error.js~InvalidGrammarError",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/errors/invalid-grammar-error.js",
    "importStyle": "InvalidGrammarError",
    "description": "Thrown when the grammar is invalid.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "es6-error~ExtendableError"
    ]
  },
  {
    "__docId__": 114,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/invalid-grammar-error.js~InvalidGrammarError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/invalid-grammar-error.js~InvalidGrammarError#constructor",
    "access": "public",
    "description": "Creates an instance of InvalidGrammarError.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Error message."
      }
    ]
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/errors/invalid-operation-error.js",
    "content": "import ExtendableError from 'es6-error'\n\n/**\n * Thrown when the operation called for was not implemented / relevant for the context.\n */\nexport default class InvalidOperationError extends ExtendableError {\n\n\t/**\n\t * Creates an instance of InvalidOperationError.\n\t * @param {string} message - Error message.\n\t */\n\tconstructor(message = 'Invalid operation') {\n\t\tsuper(message)\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/errors/invalid-operation-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "class",
    "name": "InvalidOperationError",
    "memberof": "src/errors/invalid-operation-error.js",
    "static": true,
    "longname": "src/errors/invalid-operation-error.js~InvalidOperationError",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/errors/invalid-operation-error.js",
    "importStyle": "InvalidOperationError",
    "description": "Thrown when the operation called for was not implemented / relevant for the context.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "es6-error~ExtendableError"
    ]
  },
  {
    "__docId__": 117,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/invalid-operation-error.js~InvalidOperationError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/invalid-operation-error.js~InvalidOperationError#constructor",
    "access": "public",
    "description": "Creates an instance of InvalidOperationError.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Error message."
      }
    ]
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/graph.js",
    "content": "import ChartType from './charts/chart-type'\nimport LineChart from './charts/types/line-chart'\nimport SimpleXYLineChart from './charts/types/simple-xy-line-chart'\nimport StepChart from './charts/types/step-chart'\nimport BarChart from './charts/types/bar-chart'\nimport PieChart from './charts/types/pie-chart'\nimport MultipleXYLineChart from './charts/types/multiple-xy-line-chart'\nimport AreaChart from './charts/types/area-chart'\nimport StackedBarChart from './charts/types/stacked-bar-chart'\nimport DonutChart from './charts/types/donut-chart'\nimport SplineChart from './charts/types/spline-chart'\nimport StackedAreaChart from './charts/types/stacked-area-chart'\nimport ScatterPlot from './charts/types/scatter-plot'\nimport InvalidGrammarError from './errors/invalid-grammar-error'\nimport InvalidOperationError from './errors/invalid-operation-error'\n\n/**\n * Graph is the base class of all operations withing the GraphJS.\n * It acts as a factory-pattern for creating any types of charts.\n */\nexport default class Graph {\n\n\t/**\n\t * Creates an instance of the class Graph\n\t * @param {string} grammar - Initial grammar provided to initiate the class.\n\t * This should be in the form of : generate <GRAPH_TYPE> for <DATASOURCE>\n\t */\n\tconstructor(grammar) {\n\t\t/**\n\t\t * Holds the instance of the charts types that was created within the object with the initial grammar.\n\t\t * @types {Chart}\n\t\t * @private\n\t\t */\n\t\tthis._chart = undefined\n\n\t\t// Validate and parse the grammar\n\t\tlet grammarParser = new GrammarParser(grammar)\n\n\t\tlet chartType = grammarParser.chartType\n\t\tswitch (ChartType.enumValueOf(chartType)) {\n\t\tcase ChartType.LINE_CHART:\n\t\t\tthis._chart = new LineChart(grammarParser.datasource)\n\t\t\tbreak\n\t\tcase ChartType.SIMPLE_XY_LINE_CHART:\n\t\t\tthis._chart = new SimpleXYLineChart(grammarParser.datasource)\n\t\t\tbreak\n\t\tcase ChartType.STEP_CHART:\n\t\t\tthis._chart = new StepChart(grammarParser.datasource)\n\t\t\tbreak\n\t\tcase ChartType.BAR_CHART:\n\t\t\tthis._chart = new BarChart(grammarParser.datasource)\n\t\t\tbreak\n\t\tcase ChartType.PIE_CHART:\n\t\t\tthis._chart = new PieChart(grammarParser.datasource)\n\t\t\tbreak\n\t\tcase ChartType.COMBINATION_CHART:\n\t\t\tthrow new InvalidOperationError()\n\t\t\t// this._chart = new CombinationChart(grammarParser.datasource)\n\t\t\t// break\n\t\tcase ChartType.MULTIPLE_XY_LINE_CHART:\n\t\t\tthis._chart = new MultipleXYLineChart(grammarParser.datasource)\n\t\t\tbreak\n\t\tcase ChartType.AREA_CHART:\n\t\t\tthis._chart = new AreaChart(grammarParser.datasource)\n\t\t\tbreak\n\t\tcase ChartType.STACKED_BAR_CHART:\n\t\t\tthis._chart = new StackedBarChart(grammarParser.datasource)\n\t\t\tbreak\n\t\tcase ChartType.DONUT_CHART:\n\t\t\tthis._chart = new DonutChart(grammarParser.datasource)\n\t\t\tbreak\n\t\tcase ChartType.SPLINE_CHART:\n\t\t\tthis._chart = new SplineChart(grammarParser.datasource)\n\t\t\tbreak\n\t\tcase ChartType.LINE_CHART_WITH_REGIONS:\n\t\t\tthrow new InvalidOperationError()\n\t\t\t// this._chart = new LineChartWithRegions(grammarParser.datasource)\n\t\t\t// break\n\t\tcase ChartType.STACKED_AREA_CHART:\n\t\t\tthis._chart = new StackedAreaChart(grammarParser.datasource)\n\t\t\tbreak\n\t\tcase ChartType.SCATTER_PLOT:\n\t\t\tthis._chart = new ScatterPlot(grammarParser.datasource)\n\t\t\tbreak\n\t\tcase ChartType.GAUGE_CHART:\n\t\t\tthrow new InvalidOperationError()\n\t\t\t// this._chart = new GaugeChart(grammarParser.datasource)\n\t\t\t// break\n\t\t}\n\t}\n\n\t/**\n\t * Parse the grammar given by the user.\n\t * @param grammar\n\t * @returns {boolean}\n\t */\n\tdo(grammar) {\n\t\treturn this._chart.do(grammar)\n\t}\n\n\t/**\n\t * Return the JSON output string created by parsing the input grammar.\n\t * @returns {string}\n\t */\n\tgenerateJson() {\n\t\treturn this._chart.generateJson()\n\t}\n}\n\n/**\n * Does the initial grammar parsing.\n */\nclass GrammarParser {\n\n\t/**\n\t * Creates an instance of the class GrammarParser\n\t * @param {string} grammar - Initial grammar provided to initiate the class.\n\t * This should be in the form of : generate <GRAPH_TYPE> for <DATASOURCE>\n\t */\n\tconstructor(grammar) {\n\t\tthis.grammar = grammar\n\t\tthis.chartType = undefined\n\t\tthis.datasource = undefined\n\n\t\t// Verify the basic structure of the grammar\n\t\tif (GrammarParser.verifyStructure(grammar)) {\n\t\t\tlet chartTypeExtract = grammar.match(new RegExp('generate [A-Z_]+ for'))[0]\n\t\t\tthis.chartType = chartTypeExtract.slice(9, chartTypeExtract.length - 4)\n\t\t\tthis.datasource = grammar.match(new RegExp('for {.*}'))[0].slice(4)\n\n\t\t\t// Verify the charts types and the datasource\n\t\t\tif (!GrammarParser.verifyChartType(this.chartType) || !GrammarParser.verifyDatasource(this.datasource)) {\n\t\t\t\tthrow new InvalidGrammarError()\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new InvalidGrammarError()\n\t\t}\n\t}\n\n\t/**\n\t * Verify the syntactical and the symantic validity of the whole grammar sentence.\n\t * @param grammar\n\t * @returns {boolean}\n\t */\n\tstatic verifyStructure(grammar) {\n\t\treturn grammar.match(new RegExp('generate [A-Z_]+ for {.*}'))\n\t}\n\n\t/**\n\t * Verify the vaidity of the charts types.\n\t * @param chartType\n\t * @returns {boolean}\n\t */\n\tstatic verifyChartType(chartType) {\n\t\treturn ChartType.enumValueOf(chartType) instanceof ChartType\n\t}\n\n\t/**\n\t * Verify the validity of the datasource.\n\t * @param grammar\n\t * @returns {boolean}\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tstatic verifyDatasource(grammar) {\n\t\t// TODO : Verify datasource\n\t\treturn true\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/graph.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "class",
    "name": "Graph",
    "memberof": "src/graph.js",
    "static": true,
    "longname": "src/graph.js~Graph",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/graph.js",
    "importStyle": "Graph",
    "description": "Graph is the base class of all operations withing the GraphJS.\nIt acts as a factory-pattern for creating any types of charts.",
    "lineNumber": 21,
    "interface": false
  },
  {
    "__docId__": 120,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/graph.js~Graph#constructor",
    "access": "public",
    "description": "Creates an instance of the class Graph",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": "Initial grammar provided to initiate the class.\nThis should be in the form of : generate <GRAPH_TYPE> for <DATASOURCE>"
      }
    ]
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "_chart",
    "memberof": "src/graph.js~Graph",
    "static": false,
    "longname": "src/graph.js~Graph#_chart",
    "access": "private",
    "description": "Holds the instance of the charts types that was created within the object with the initial grammar.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@types",
        "tagValue": "{Chart}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "do",
    "memberof": "src/graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/graph.js~Graph#do",
    "access": "public",
    "description": "Parse the grammar given by the user.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "generateJson",
    "memberof": "src/graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/graph.js~Graph#generateJson",
    "access": "public",
    "description": "Return the JSON output string created by parsing the input grammar.",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 136,
    "kind": "class",
    "name": "GrammarParser",
    "memberof": "src/graph.js",
    "static": true,
    "longname": "src/graph.js~GrammarParser",
    "access": "public",
    "export": false,
    "importPath": "@ivantha/graphjs/src/graph.js",
    "importStyle": null,
    "description": "Does the initial grammar parsing.",
    "lineNumber": 113,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/graph.js~GrammarParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/graph.js~GrammarParser#constructor",
    "access": "public",
    "description": "Creates an instance of the class GrammarParser",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": "Initial grammar provided to initiate the class.\nThis should be in the form of : generate <GRAPH_TYPE> for <DATASOURCE>"
      }
    ]
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "grammar",
    "memberof": "src/graph.js~GrammarParser",
    "static": false,
    "longname": "src/graph.js~GrammarParser#grammar",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "chartType",
    "memberof": "src/graph.js~GrammarParser",
    "static": false,
    "longname": "src/graph.js~GrammarParser#chartType",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "datasource",
    "memberof": "src/graph.js~GrammarParser",
    "static": false,
    "longname": "src/graph.js~GrammarParser#datasource",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "verifyStructure",
    "memberof": "src/graph.js~GrammarParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/graph.js~GrammarParser.verifyStructure",
    "access": "public",
    "description": "Verify the syntactical and the symantic validity of the whole grammar sentence.",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "verifyChartType",
    "memberof": "src/graph.js~GrammarParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/graph.js~GrammarParser.verifyChartType",
    "access": "public",
    "description": "Verify the vaidity of the charts types.",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chartType",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "verifyDatasource",
    "memberof": "src/graph.js~GrammarParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/graph.js~GrammarParser.verifyDatasource",
    "access": "public",
    "description": "Verify the validity of the datasource.",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "grammar",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "src/index.js",
    "content": "import Graph from './graph'\n\nexport {Graph}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/parsers/csv-parser.js",
    "content": "/**\n * Parse CSV files into the desired format of GraphJS library.\n */\n// TODO : To be implemented\nexport default class CsvParser {\n\n\t/**\n\t * Creates an instance of the CsvParser class\n\t */\n\tconstructor() {\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/parsers/csv-parser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "class",
    "name": "CsvParser",
    "memberof": "src/parsers/csv-parser.js",
    "static": true,
    "longname": "src/parsers/csv-parser.js~CsvParser",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/parsers/csv-parser.js",
    "importStyle": "CsvParser",
    "description": "Parse CSV files into the desired format of GraphJS library.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 149,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/parsers/csv-parser.js~CsvParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parsers/csv-parser.js~CsvParser#constructor",
    "access": "public",
    "description": "Creates an instance of the CsvParser class",
    "lineNumber": 10
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "src/parsers/json-parser.js",
    "content": "/**\n * Parse JSON files into the desired format of GraphJS library.\n */\n// TODO : To be implemented\nexport default class JsonParser {\n\n\t/**\n\t * Creates an instance of the JsonParser class\n\t */\n\tconstructor() {\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/parsers/json-parser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "class",
    "name": "JsonParser",
    "memberof": "src/parsers/json-parser.js",
    "static": true,
    "longname": "src/parsers/json-parser.js~JsonParser",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/parsers/json-parser.js",
    "importStyle": "JsonParser",
    "description": "Parse JSON files into the desired format of GraphJS library.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 152,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/parsers/json-parser.js~JsonParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parsers/json-parser.js~JsonParser#constructor",
    "access": "public",
    "description": "Creates an instance of the JsonParser class",
    "lineNumber": 10
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/parsers/tsv-parser.js",
    "content": "/**\n * Parse TSV files into the desired format of GraphJS library.\n */\n// TODO : To be implemented\nexport default class TsvParser {\n\n\t/**\n\t * Creates an instance of the TsvParser class\n\t */\n\tconstructor() {\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/parsers/tsv-parser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "class",
    "name": "TsvParser",
    "memberof": "src/parsers/tsv-parser.js",
    "static": true,
    "longname": "src/parsers/tsv-parser.js~TsvParser",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/parsers/tsv-parser.js",
    "importStyle": "TsvParser",
    "description": "Parse TSV files into the desired format of GraphJS library.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 155,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/parsers/tsv-parser.js~TsvParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parsers/tsv-parser.js~TsvParser#constructor",
    "access": "public",
    "description": "Creates an instance of the TsvParser class",
    "lineNumber": 10
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/parsers/txt-parser.js",
    "content": "/**\n * Parse TXT files into the desired format of GraphJS library.\n */\n// TODO : To be implemented\nexport default class TxtParser {\n\n\t/**\n\t * Creates an instance of the TxtParser class\n\t */\n\tconstructor() {\n\t}\n}",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/src/parsers/txt-parser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "class",
    "name": "TxtParser",
    "memberof": "src/parsers/txt-parser.js",
    "static": true,
    "longname": "src/parsers/txt-parser.js~TxtParser",
    "access": "public",
    "export": true,
    "importPath": "@ivantha/graphjs/src/parsers/txt-parser.js",
    "importStyle": "TxtParser",
    "description": "Parse TXT files into the desired format of GraphJS library.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 158,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/parsers/txt-parser.js~TxtParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parsers/txt-parser.js~TxtParser#constructor",
    "access": "public",
    "description": "Creates an instance of the TxtParser class",
    "lineNumber": 10
  },
  {
    "kind": "index",
    "content": "![GraphJS logo](https://raw.githubusercontent.com/codezilla2018/GraphJS/master/Resources/Original/analytics_64.png) \n## GraphJS \n\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/4eba90e2fb9c434d81180ea077e09b03)](https://www.codacy.com/app/OshanIvantha/GraphJS?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=OshanIvantha/GraphJS&amp;utm_campaign=Badge_Grade) [![Build Status](https://travis-ci.org/OshanIvantha/GraphJS.svg?branch=master)](https://travis-ci.org/OshanIvantha/GraphJS) [![Coverage Status](https://coveralls.io/repos/github/OshanIvantha/GraphJS/badge.svg?branch=master)](https://coveralls.io/github/OshanIvantha/GraphJS?branch=master)\n\nA javascript library written in ES6 for parsing a simple grammar which is fully complient with [C3.js](http://c3js.org/). \n\n[Demo](http://ivantha.me/graphjs-demo/) |\n[API Documentation](http://ivantha.me/GraphJS/) |\n[Developer documentation](https://github.com/codezilla2018/GraphJS/tree/master/docs/docs) |\n[Contributing](https://raw.githubusercontent.com/codezilla2018/GraphJS/master/CONTRIBUTING.md) |\n[Code of Conduct](https://raw.githubusercontent.com/codezilla2018/GraphJS/master/CODE_OF_CONDUCT.md) |\n\nThe [GraphJS](xxx) library is exported as a [UMD](https://github.com/umdjs/umd) module.\n\nGraphJS is released under the [MIT license](https://raw.githubusercontent.com/codezilla2018/GraphJS/master/LICENSE) & supports modern environments.<br>\n\n## Gettings Started\n\n### Installation\n\nIn a browser:\n```html\n<script src=\"graphjs.min.js\"></script>\n```\n\nUsing npm:\n```shell\n$ npm i --save @ivantha/graphjs\n```\n\n### Usage\n\n1) Initialize a chart using the Graph class\n```\nlet chart = new Graph(\"generate <CHART_TYPE> from <JSON_DATASOURCE>\")\n```\n\nChart type can be any one of,\n- LINE_CHART\n- SIMPLE_XY_LINE_CHART\n- STEP_CHART\n- BAR_CHART\n- PIE_CHART\n- COMBINATION_CHART\n- MULTIPLE_XY_LINE_CHART\n- AREA_CHART\n- STACKED_BAR_CHART\n- DONUT_CHART\n- SPLINE_CHART\n- LINE_CHART_WITH_REGIONS\n- STACKED_AREA_CHART\n- SCATTER_PLOT\n- GUAGE_CHART\n\n2) Modify your chart using the suitable grammar\n```\nchart.do(\"hide tooltip\")\nchart.do('set gridline x at 20 as another-x')\n```\n\n3) Export the JSON string of the chart using,\n```\nlet jsonOut = chart.generateJson()\n```\n\n4) Generated JSON output is fully complient with the C3.js library\n```\nlet chart = c3.generate(jsonOut)\n```\n\n## Development\n\n#### NPM scripts\n\n - `npm run esdoc`: Generate documentation\n - `npm run webpack`: Generate minified graphjs.min.js\n - `npm run babel`: Generate the compiled ES6 source files\n - `npm run build`: Build everything\n - `npm run clean`: Clean the build files\n - `npm run test`: Run all tests\n\n### Built With\n\n* [ES6]()\n* [Babel](https://babeljs.io/) \n* [Webpack](https://webpack.js.org/) \n* [ESLint](https://eslint.org/) \n* [ESDoc](https://esdoc.org/) \n* [Istanbul](https://istanbul.js.org/) \n* [Mocha](https://mochajs.org/) \n* [Chai](http://www.chaijs.com/) \n* [TravisCI](https://travis-ci.org/) \n* [Coveralls.io](https://coveralls.io/)\n\n\n### Authors\n\n* **Oshan Mudannayake** - *Initial work* - [OshanIvantha](https://github.com/OshanIvantha)\n\n### Acknowledgments\n\n* <div>Logo Icon made by <a href=\"https://www.flaticon.com/authors/vectors-market\" title=\"Vectors Market\">Vectors Market</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\" title=\"Creative Commons BY 3.0\" target=\"_blank\">CC 3.0 BY</a></div>",
    "longname": "/Users/ivantha/Git/GraphJS/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@ivantha/graphjs\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A simple grammar to convert raw data into visual graphs\",\n  \"main\": \"build/bundle.min.js\",\n  \"scripts\": {\n    \"clean\": \"rm -rf dist/* && rm -rf docs/*\",\n    \"test\": \"nyc --reporter=html --reporter=text mocha --require babel-core/register test/**/*.spec.js test/**/**/*.spec.js\",\n    \"build\": \"npm run clean && npm run babel && npm run webpack && npm run esdoc\",\n    \"dev\": \"npm run clean && npm run babel && npm run webpack\",\n    \"coverage\": \"nyc report --reporter=text-lcov | coveralls\",\n    \"webpack\": \"webpack\",\n    \"babel\": \"babel --presets es2015 src --out-dir dist/src\",\n    \"esdoc\": \"rm -rf dist/docs && esdoc && rm -rf docs && cp -r ./dist/docs ./\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/OshanIvantha/GraphJS.git\"\n  },\n  \"keywords\": [\n    \"charts\"\n  ],\n  \"author\": \"O.I. Mudannayake <oshan.ivantha@gmail.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/OshanIvantha/GraphJS/issues\"\n  },\n  \"homepage\": \"https://github.com/OshanIvantha/GraphJS#readme\",\n  \"dependencies\": {\n    \"c3\": \"^0.4.23\",\n    \"d3\": \"^5.4.0\",\n    \"enumify\": \"^1.0.4\",\n    \"es6-error\": \"^4.1.1\",\n    \"npm\": \"^6.0.1\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-core\": \"^6.26.3\",\n    \"babel-loader\": \"^7.1.4\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"chai\": \"^4.1.2\",\n    \"coveralls\": \"^3.0.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.19.1\",\n    \"eslint-loader\": \"^2.0.0\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"istanbul\": \"^0.4.5\",\n    \"lodash\": \"^4.17.10\",\n    \"mocha\": \"^5.2.0\",\n    \"nyc\": \"^11.8.0\",\n    \"webpack\": \"^4.8.3\",\n    \"webpack-cli\": \"^2.1.3\"\n  }\n}\n",
    "longname": "/Users/ivantha/Git/GraphJS/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 159,
    "kind": "testFile",
    "name": "test/charts/chart.spec.js",
    "content": "import chai from 'chai'\nimport Chart from '../../src/charts/chart'\nimport * as line_chart_data from './types/line-chart.data'\n\nvar assert = chai.assert\n\n/**\n * Tests for Chart class\n * @test {Chart}\n */\ndescribe('Chart', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {Chart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew Chart('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {Chart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tnew Chart(JSON.stringify(line_chart_data))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do function behaviour with invalid data\n\t * @test {Chart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should return false', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\n\t\t\tassert.equal(chart.do(''), false)\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Grid Lines\" function behaviour with valid data\n\t * @test {Chart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\t\t\tchart.do('show grid x')\n\t\t\tchart.do('show grid Y')\n\t\t\tchart.do('hide grid x')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...line_chart_data.data1], ['data2', ...line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': true,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Tooltip\" function behaviour with valid data\n\t * @test {Chart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\t\t\tchart.do('show tooltip')\n\t\t\tchart.do('ungroup tooltip')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...line_chart_data.data1], ['data2', ...line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': false\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Chart size\" function behaviour with valid data\n\t * @test {Chart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\t\t\tchart.do('set height as 500')\n\t\t\tchart.do('set width as 1000')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': 500,\n\t\t\t\t\t'width': 1000\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...line_chart_data.data1], ['data2', ...line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Legend\" function behaviour with valid data\n\t * @test {Chart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\t\t\tchart.do('hide legend')\n\t\t\tchart.do('move legend to right')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...line_chart_data.data1], ['data2', ...line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': false,\n\t\t\t\t\t'position': 'right'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Interaction\" function behaviour with valid data\n\t * @test {Chart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\t\t\tchart.do('show subchart')\n\t\t\tchart.do('enable zoom')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...line_chart_data.data1], ['data2', ...line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': true\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Rotate axis\" function behaviour with valid data\n\t * @test {Chart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\t\t\tchart.do('enable rotate')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...line_chart_data.data1], ['data2', ...line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': true,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Axis labels\" function behaviour with valid data\n\t * @test {Chart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\t\t\tchart.do('set x axis label as awesomeX')\n\t\t\tchart.do('set Y axis label as my-y')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...line_chart_data.data1], ['data2', ...line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': 'awesomeX',\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': 'my-y',\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Axis boundaries\" function behaviour with valid data\n\t * @test {Chart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\t\t\tchart.do('set x axis min as -50')\n\t\t\tchart.do('set x axis max as 65')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...line_chart_data.data1], ['data2', ...line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': 65,\n\t\t\t\t\t\t'min': -50\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Data labels\" function behaviour with valid data\n\t * @test {Chart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\t\t\tchart.do('set data1 data label as monkey')\n\t\t\tchart.do('set data2 data label as cat')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...line_chart_data.data1], ['data2', ...line_chart_data.data2]],\n\t\t\t\t\t'names': {\n\t\t\t\t\t\t'data1': 'monkey',\n\t\t\t\t\t\t'data2': 'cat'\n\t\t\t\t\t},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Line Chart hide points\" function behaviour with valid data\n\t * @test {Chart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\t\t\tchart.do('hide points')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...line_chart_data.data1], ['data2', ...line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Optional Grid Lines\" function behaviour with valid data\n\t * @test {Chart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\t\t\tchart.do('set gridline y at 10 as custom-y')\n\t\t\tchart.do('set gridline x at 20 as another-x')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...line_chart_data.data1], ['data2', ...line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'value': 20,\n\t\t\t\t\t\t\t\t'text': 'another-x'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'value': 10,\n\t\t\t\t\t\t\t\t'text': 'custom-y'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the generateJson function behaviour with valid data\n\t * @test {Chart#generateJson}\n\t */\n\tdescribe('generateJson', function () {\n\t\tit('should return default output json', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tlet chart = new Chart(JSON.stringify(line_chart_data))\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...line_chart_data.data1], ['data2', ...line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/chart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/charts/chart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0",
    "access": null,
    "description": "Tests for Chart class",
    "lineNumber": 11,
    "testTargets": [
      "Chart"
    ]
  },
  {
    "__docId__": 161,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe1",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "Chart#constructor"
    ]
  },
  {
    "__docId__": 162,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/charts/chart.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe1.it2",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 163,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe3",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "Chart#constructor"
    ]
  },
  {
    "__docId__": 164,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/charts/chart.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe3.it4",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 165,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe5",
    "access": null,
    "description": "Test to check the do function behaviour with invalid data",
    "lineNumber": 40,
    "testTargets": [
      "Chart#do"
    ]
  },
  {
    "__docId__": 166,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/charts/chart.spec.js~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe5.it6",
    "access": null,
    "description": "should return false",
    "lineNumber": 41
  },
  {
    "__docId__": 167,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe7",
    "access": null,
    "description": "Test to check the do \"Grid Lines\" function behaviour with valid data",
    "lineNumber": 53,
    "testTargets": [
      "Chart#do"
    ]
  },
  {
    "__docId__": 168,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/charts/chart.spec.js~describe0.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe7.it8",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 54
  },
  {
    "__docId__": 169,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe9",
    "access": null,
    "description": "Test to check the do \"Tooltip\" function behaviour with valid data",
    "lineNumber": 132,
    "testTargets": [
      "Chart#do"
    ]
  },
  {
    "__docId__": 170,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/charts/chart.spec.js~describe0.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe9.it10",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 133
  },
  {
    "__docId__": 171,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe11",
    "access": null,
    "description": "Test to check the do \"Chart size\" function behaviour with valid data",
    "lineNumber": 210,
    "testTargets": [
      "Chart#do"
    ]
  },
  {
    "__docId__": 172,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/charts/chart.spec.js~describe0.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe11.it12",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 211
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe13",
    "access": null,
    "description": "Test to check the do \"Legend\" function behaviour with valid data",
    "lineNumber": 288,
    "testTargets": [
      "Chart#do"
    ]
  },
  {
    "__docId__": 174,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/charts/chart.spec.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe13.it14",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 289
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe15",
    "access": null,
    "description": "Test to check the do \"Interaction\" function behaviour with valid data",
    "lineNumber": 366,
    "testTargets": [
      "Chart#do"
    ]
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/charts/chart.spec.js~describe0.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe15.it16",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 367
  },
  {
    "__docId__": 177,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe17",
    "access": null,
    "description": "Test to check the do \"Rotate axis\" function behaviour with valid data",
    "lineNumber": 444,
    "testTargets": [
      "Chart#do"
    ]
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/charts/chart.spec.js~describe0.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe17.it18",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 445
  },
  {
    "__docId__": 179,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe19",
    "access": null,
    "description": "Test to check the do \"Axis labels\" function behaviour with valid data",
    "lineNumber": 521,
    "testTargets": [
      "Chart#do"
    ]
  },
  {
    "__docId__": 180,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/charts/chart.spec.js~describe0.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe19.it20",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 522
  },
  {
    "__docId__": 181,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe21",
    "access": null,
    "description": "Test to check the do \"Axis boundaries\" function behaviour with valid data",
    "lineNumber": 599,
    "testTargets": [
      "Chart#do"
    ]
  },
  {
    "__docId__": 182,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/charts/chart.spec.js~describe0.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe21.it22",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 600
  },
  {
    "__docId__": 183,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe23",
    "access": null,
    "description": "Test to check the do \"Data labels\" function behaviour with valid data",
    "lineNumber": 677,
    "testTargets": [
      "Chart#do"
    ]
  },
  {
    "__docId__": 184,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/charts/chart.spec.js~describe0.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe23.it24",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 678
  },
  {
    "__docId__": 185,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe25",
    "access": null,
    "description": "Test to check the do \"Line Chart hide points\" function behaviour with valid data",
    "lineNumber": 758,
    "testTargets": [
      "Chart#do"
    ]
  },
  {
    "__docId__": 186,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/charts/chart.spec.js~describe0.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe25.it26",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 759
  },
  {
    "__docId__": 187,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe27",
    "access": null,
    "description": "Test to check the do \"Optional Grid Lines\" function behaviour with valid data",
    "lineNumber": 835,
    "testTargets": [
      "Chart#do"
    ]
  },
  {
    "__docId__": 188,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/charts/chart.spec.js~describe0.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe27.it28",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 836
  },
  {
    "__docId__": 189,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "test/charts/chart.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe29",
    "access": null,
    "description": "Test to check the generateJson function behaviour with valid data",
    "lineNumber": 923,
    "testTargets": [
      "Chart#generateJson"
    ]
  },
  {
    "__docId__": 190,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/charts/chart.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/chart.spec.js~describe0.describe29.it30",
    "access": null,
    "description": "should return default output json",
    "lineNumber": 924
  },
  {
    "__docId__": 191,
    "kind": "testFile",
    "name": "test/charts/types/area-chart.spec.js",
    "content": "import chai from 'chai'\nimport * as area_chart_data from './area-chart.data'\nimport AreaChart from '../../../src/charts/types/area-chart'\n\nvar assert = chai.assert\n\n/**\n * Tests for AreaChart class\n * @test {AreaChart}\n */\ndescribe('AreaChart', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {AreaChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew AreaChart('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {AreaChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete area_chart_data['default']\n\t\t\tnew AreaChart(JSON.stringify(area_chart_data))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do function behaviour with invalid data\n\t * @test {AreaChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tdelete area_chart_data['default']\n\t\t\tlet chart = new AreaChart(JSON.stringify(area_chart_data))\n\n\t\t\tassert.throw(function () {\n\t\t\t\tchart.do('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Area type\" function behaviour with valid data\n\t * @test {AreaChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete area_chart_data['default']\n\t\t\tlet chart = new AreaChart(JSON.stringify(area_chart_data))\n\t\t\tchart.do('where data1 as area')\n\t\t\tchart.do('where data2 as area-spline')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...area_chart_data.data1], ['data2', ...area_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {\n\t\t\t\t\t\t'data1': 'area',\n\t\t\t\t\t\t'data2': 'area-spline'\n\t\t\t\t\t},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/types/area-chart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "test/charts/types/area-chart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/types/area-chart.spec.js~describe31",
    "access": null,
    "description": "Tests for AreaChart class",
    "lineNumber": 11,
    "testTargets": [
      "AreaChart"
    ]
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "describe32",
    "testId": 32,
    "memberof": "test/charts/types/area-chart.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/area-chart.spec.js~describe31.describe32",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "AreaChart#constructor"
    ]
  },
  {
    "__docId__": 194,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/charts/types/area-chart.spec.js~describe31.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/area-chart.spec.js~describe31.describe32.it33",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 195,
    "kind": "test",
    "name": "describe34",
    "testId": 34,
    "memberof": "test/charts/types/area-chart.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/area-chart.spec.js~describe31.describe34",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "AreaChart#constructor"
    ]
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/charts/types/area-chart.spec.js~describe31.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/area-chart.spec.js~describe31.describe34.it35",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "test/charts/types/area-chart.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/area-chart.spec.js~describe31.describe36",
    "access": null,
    "description": "Test to check the do function behaviour with invalid data",
    "lineNumber": 40,
    "testTargets": [
      "AreaChart#do"
    ]
  },
  {
    "__docId__": 198,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/charts/types/area-chart.spec.js~describe31.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/area-chart.spec.js~describe31.describe36.it37",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 41
  },
  {
    "__docId__": 199,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "test/charts/types/area-chart.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/area-chart.spec.js~describe31.describe38",
    "access": null,
    "description": "Test to check the do \"Area type\" function behaviour with valid data",
    "lineNumber": 55,
    "testTargets": [
      "AreaChart#do"
    ]
  },
  {
    "__docId__": 200,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/charts/types/area-chart.spec.js~describe31.describe38",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/area-chart.spec.js~describe31.describe38.it39",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 56
  },
  {
    "__docId__": 201,
    "kind": "testFile",
    "name": "test/charts/types/bar-chart.spec.js",
    "content": "import chai from 'chai'\nimport * as bar_chart_data from './bar-chart.data'\nimport BarChart from '../../../src/charts/types/bar-chart'\n\nvar assert = chai.assert\n\n/**\n * Tests for BarChart class\n * @test {BarChart}\n */\ndescribe('BarChart', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {BarChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew BarChart('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {BarChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete bar_chart_data['default']\n\t\t\tnew BarChart(JSON.stringify(bar_chart_data))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do function behaviour with invalid data\n\t * @test {BarChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tdelete bar_chart_data['default']\n\t\t\tlet chart = new BarChart(JSON.stringify(bar_chart_data))\n\n\t\t\tassert.throw(function () {\n\t\t\t\tchart.do('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"\" function behaviour with valid data\n\t * @test {BarChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete bar_chart_data['default']\n\t\t\tlet chart = new BarChart(JSON.stringify(bar_chart_data))\n\t\t\tchart.do('set bar width as 0.5')\n\t\t\tchart.do('set bar width as 100 pixels')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...bar_chart_data.data1], ['data2', ...bar_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': 'bar',\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': 100\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/types/bar-chart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "test",
    "name": "describe40",
    "testId": 40,
    "memberof": "test/charts/types/bar-chart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/types/bar-chart.spec.js~describe40",
    "access": null,
    "description": "Tests for BarChart class",
    "lineNumber": 11,
    "testTargets": [
      "BarChart"
    ]
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/charts/types/bar-chart.spec.js~describe40",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/bar-chart.spec.js~describe40.describe41",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "BarChart#constructor"
    ]
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/charts/types/bar-chart.spec.js~describe40.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/bar-chart.spec.js~describe40.describe41.it42",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 205,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "test/charts/types/bar-chart.spec.js~describe40",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/bar-chart.spec.js~describe40.describe43",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "BarChart#constructor"
    ]
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/charts/types/bar-chart.spec.js~describe40.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/bar-chart.spec.js~describe40.describe43.it44",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/charts/types/bar-chart.spec.js~describe40",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/bar-chart.spec.js~describe40.describe45",
    "access": null,
    "description": "Test to check the do function behaviour with invalid data",
    "lineNumber": 40,
    "testTargets": [
      "BarChart#do"
    ]
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/charts/types/bar-chart.spec.js~describe40.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/bar-chart.spec.js~describe40.describe45.it46",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 41
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "describe47",
    "testId": 47,
    "memberof": "test/charts/types/bar-chart.spec.js~describe40",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/bar-chart.spec.js~describe40.describe47",
    "access": null,
    "description": "Test to check the do \"\" function behaviour with valid data",
    "lineNumber": 55,
    "testTargets": [
      "BarChart#do"
    ]
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/charts/types/bar-chart.spec.js~describe40.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/bar-chart.spec.js~describe40.describe47.it48",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 56
  },
  {
    "__docId__": 211,
    "kind": "testFile",
    "name": "test/charts/types/donut-chart.spec.js",
    "content": "import chai from 'chai'\nimport * as donut_chart_data from './donut-chart.data'\nimport DonutChart from '../../../src/charts/types/donut-chart'\n\nvar assert = chai.assert\n\n/**\n * Tests for DonutChart class\n * @test {DonutChart}\n */\ndescribe('DonutChart', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {DonutChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew DonutChart('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {DonutChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete donut_chart_data['default']\n\t\t\tnew DonutChart(JSON.stringify(donut_chart_data))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do function behaviour with invalid data\n\t * @test {DonutChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tdelete donut_chart_data['default']\n\t\t\tlet chart = new DonutChart(JSON.stringify(donut_chart_data))\n\n\t\t\tassert.throw(function () {\n\t\t\t\tchart.do('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Set title\" function behaviour with valid data\n\t * @test {DonutChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete donut_chart_data['default']\n\t\t\tlet chart = new DonutChart(JSON.stringify(donut_chart_data))\n\t\t\tchart.do('set title as my-donut')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['setosa', ...donut_chart_data.setosa],\n\t\t\t\t\t\t['versicolor', ...donut_chart_data.versicolor],\n\t\t\t\t\t\t['virginica', ...donut_chart_data.virginica]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': 'donut',\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': 'my-donut'\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/types/donut-chart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "test",
    "name": "describe49",
    "testId": 49,
    "memberof": "test/charts/types/donut-chart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/types/donut-chart.spec.js~describe49",
    "access": null,
    "description": "Tests for DonutChart class",
    "lineNumber": 11,
    "testTargets": [
      "DonutChart"
    ]
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "describe50",
    "testId": 50,
    "memberof": "test/charts/types/donut-chart.spec.js~describe49",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/donut-chart.spec.js~describe49.describe50",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "DonutChart#constructor"
    ]
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/charts/types/donut-chart.spec.js~describe49.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/donut-chart.spec.js~describe49.describe50.it51",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "test/charts/types/donut-chart.spec.js~describe49",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/donut-chart.spec.js~describe49.describe52",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "DonutChart#constructor"
    ]
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/charts/types/donut-chart.spec.js~describe49.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/donut-chart.spec.js~describe49.describe52.it53",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "test/charts/types/donut-chart.spec.js~describe49",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/donut-chart.spec.js~describe49.describe54",
    "access": null,
    "description": "Test to check the do function behaviour with invalid data",
    "lineNumber": 40,
    "testTargets": [
      "DonutChart#do"
    ]
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/charts/types/donut-chart.spec.js~describe49.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/donut-chart.spec.js~describe49.describe54.it55",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 41
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "describe56",
    "testId": 56,
    "memberof": "test/charts/types/donut-chart.spec.js~describe49",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/donut-chart.spec.js~describe49.describe56",
    "access": null,
    "description": "Test to check the do \"Set title\" function behaviour with valid data",
    "lineNumber": 55,
    "testTargets": [
      "DonutChart#do"
    ]
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/charts/types/donut-chart.spec.js~describe49.describe56",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/donut-chart.spec.js~describe49.describe56.it57",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 56
  },
  {
    "__docId__": 221,
    "kind": "testFile",
    "name": "test/charts/types/line-chart.spec.js",
    "content": "import chai from 'chai'\nimport * as line_chart_data from './line-chart.data'\nimport LineChart from '../../../src/charts/types/line-chart'\n\nvar assert = chai.assert\n\n/**\n * Tests for LineChart class\n * @test {LineChart}\n */\ndescribe('LineChart', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {LineChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew LineChart('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {LineChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete line_chart_data['default']\n\t\t\tnew LineChart(JSON.stringify(line_chart_data))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/types/line-chart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "test/charts/types/line-chart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/types/line-chart.spec.js~describe58",
    "access": null,
    "description": "Tests for LineChart class",
    "lineNumber": 11,
    "testTargets": [
      "LineChart"
    ]
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "describe59",
    "testId": 59,
    "memberof": "test/charts/types/line-chart.spec.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/line-chart.spec.js~describe58.describe59",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "LineChart#constructor"
    ]
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/charts/types/line-chart.spec.js~describe58.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/line-chart.spec.js~describe58.describe59.it60",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/charts/types/line-chart.spec.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/line-chart.spec.js~describe58.describe61",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "LineChart#constructor"
    ]
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/charts/types/line-chart.spec.js~describe58.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/line-chart.spec.js~describe58.describe61.it62",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 227,
    "kind": "testFile",
    "name": "test/charts/types/multiple-xy-line-chart.spec.js",
    "content": "import chai from 'chai'\nimport * as multiple_xy_line_chart_data from './multiple-xy-line-chart.data'\nimport MultipleXYLineChart from '../../../src/charts/types/multiple-xy-line-chart'\n\nvar assert = chai.assert\n\n/**\n * Tests for MultipleXYLineChart class\n * @test {MultipleXYLineChart}\n */\ndescribe('MultipleXYLineChart', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {MultipleXYLineChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew MultipleXYLineChart('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {MultipleXYLineChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete multiple_xy_line_chart_data['default']\n\t\t\tnew MultipleXYLineChart(JSON.stringify(multiple_xy_line_chart_data))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do function behaviour with invalid data\n\t * @test {MultipleXYLineChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tdelete multiple_xy_line_chart_data['default']\n\t\t\tlet chart = new MultipleXYLineChart(JSON.stringify(multiple_xy_line_chart_data))\n\n\t\t\tassert.throw(function () {\n\t\t\t\tchart.do('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"Axis data mapping\" function behaviour with valid data\n\t * @test {MultipleXYLineChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete multiple_xy_line_chart_data['default']\n\t\t\tlet chart = new MultipleXYLineChart(JSON.stringify(multiple_xy_line_chart_data))\n\t\t\tchart.do('set data1 for x1')\n\t\t\tchart.do('set data2 for x2')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {\n\t\t\t\t\t\t'data1': 'x1',\n\t\t\t\t\t\t'data2': 'x2'\n\t\t\t\t\t},\n\t\t\t\t\t'columns': [['x1', ...multiple_xy_line_chart_data.x1],\n\t\t\t\t\t\t['x2', ...multiple_xy_line_chart_data.x2],\n\t\t\t\t\t\t['data1', ...multiple_xy_line_chart_data.data1],\n\t\t\t\t\t\t['data2', ...multiple_xy_line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/types/multiple-xy-line-chart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "test/charts/types/multiple-xy-line-chart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/types/multiple-xy-line-chart.spec.js~describe63",
    "access": null,
    "description": "Tests for MultipleXYLineChart class",
    "lineNumber": 11,
    "testTargets": [
      "MultipleXYLineChart"
    ]
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "describe64",
    "testId": 64,
    "memberof": "test/charts/types/multiple-xy-line-chart.spec.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/multiple-xy-line-chart.spec.js~describe63.describe64",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "MultipleXYLineChart#constructor"
    ]
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/charts/types/multiple-xy-line-chart.spec.js~describe63.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/multiple-xy-line-chart.spec.js~describe63.describe64.it65",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "describe66",
    "testId": 66,
    "memberof": "test/charts/types/multiple-xy-line-chart.spec.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/multiple-xy-line-chart.spec.js~describe63.describe66",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "MultipleXYLineChart#constructor"
    ]
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/charts/types/multiple-xy-line-chart.spec.js~describe63.describe66",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/multiple-xy-line-chart.spec.js~describe63.describe66.it67",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe68",
    "testId": 68,
    "memberof": "test/charts/types/multiple-xy-line-chart.spec.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/multiple-xy-line-chart.spec.js~describe63.describe68",
    "access": null,
    "description": "Test to check the do function behaviour with invalid data",
    "lineNumber": 40,
    "testTargets": [
      "MultipleXYLineChart#do"
    ]
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/charts/types/multiple-xy-line-chart.spec.js~describe63.describe68",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/multiple-xy-line-chart.spec.js~describe63.describe68.it69",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 41
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/charts/types/multiple-xy-line-chart.spec.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/multiple-xy-line-chart.spec.js~describe63.describe70",
    "access": null,
    "description": "Test to check the do \"Axis data mapping\" function behaviour with valid data",
    "lineNumber": 55,
    "testTargets": [
      "MultipleXYLineChart#do"
    ]
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/charts/types/multiple-xy-line-chart.spec.js~describe63.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/multiple-xy-line-chart.spec.js~describe63.describe70.it71",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 56
  },
  {
    "__docId__": 237,
    "kind": "testFile",
    "name": "test/charts/types/pie-chart.spec.js",
    "content": "import chai from 'chai'\nimport * as pie_chart_data from './pie-chart.data'\nimport PieChart from '../../../src/charts/types/pie-chart'\n\nvar assert = chai.assert\n\n/**\n * Tests for PieChart class\n * @test {PieChart}\n */\ndescribe('PieChart', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {LineChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew PieChart('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {LineChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete pie_chart_data['default']\n\t\t\tnew PieChart(JSON.stringify(pie_chart_data))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/types/pie-chart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "describe72",
    "testId": 72,
    "memberof": "test/charts/types/pie-chart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/types/pie-chart.spec.js~describe72",
    "access": null,
    "description": "Tests for PieChart class",
    "lineNumber": 11,
    "testTargets": [
      "PieChart"
    ]
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "test/charts/types/pie-chart.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/pie-chart.spec.js~describe72.describe73",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "LineChart#constructor"
    ]
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/charts/types/pie-chart.spec.js~describe72.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/pie-chart.spec.js~describe72.describe73.it74",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "describe75",
    "testId": 75,
    "memberof": "test/charts/types/pie-chart.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/pie-chart.spec.js~describe72.describe75",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "LineChart#constructor"
    ]
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/charts/types/pie-chart.spec.js~describe72.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/pie-chart.spec.js~describe72.describe75.it76",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 243,
    "kind": "testFile",
    "name": "test/charts/types/scatter-plot.spec.js",
    "content": "import chai from 'chai'\nimport * as scatter_plot_data from './scatter-plot.data'\nimport ScatterPlot from '../../../src/charts/types/scatter-plot'\n\nvar assert = chai.assert\n\n/**\n * Tests for ScatterPlot class\n * @test {ScatterPlot}\n */\ndescribe('ScatterPlot', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {ScatterPlot#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew ScatterPlot('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {ScatterPlot#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete scatter_plot_data['default']\n\t\t\tnew ScatterPlot(JSON.stringify(scatter_plot_data))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/types/scatter-plot.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "test/charts/types/scatter-plot.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/types/scatter-plot.spec.js~describe77",
    "access": null,
    "description": "Tests for ScatterPlot class",
    "lineNumber": 11,
    "testTargets": [
      "ScatterPlot"
    ]
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "describe78",
    "testId": 78,
    "memberof": "test/charts/types/scatter-plot.spec.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/scatter-plot.spec.js~describe77.describe78",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "ScatterPlot#constructor"
    ]
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "test/charts/types/scatter-plot.spec.js~describe77.describe78",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/scatter-plot.spec.js~describe77.describe78.it79",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "describe80",
    "testId": 80,
    "memberof": "test/charts/types/scatter-plot.spec.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/scatter-plot.spec.js~describe77.describe80",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "ScatterPlot#constructor"
    ]
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/charts/types/scatter-plot.spec.js~describe77.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/scatter-plot.spec.js~describe77.describe80.it81",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 249,
    "kind": "testFile",
    "name": "test/charts/types/simple-xy-line-chart.spec.js",
    "content": "import chai from 'chai'\nimport * as simple_xy_line_chart_data from './simple-xy-line-chart.data'\nimport SimpleXYLineChart from '../../../src/charts/types/simple-xy-line-chart'\n\nvar assert = chai.assert\n\n/**\n * Tests for SimpleXYLineChart class\n * @test {SimpleXYLineChart}\n */\ndescribe('SimpleXYLineChart', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {SimpleXYLineChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew SimpleXYLineChart('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {SimpleXYLineChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete simple_xy_line_chart_data['default']\n\t\t\tnew SimpleXYLineChart(JSON.stringify(simple_xy_line_chart_data))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do function behaviour with invalid data\n\t * @test {AreaChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tdelete simple_xy_line_chart_data['default']\n\t\t\tlet chart = new SimpleXYLineChart(JSON.stringify(simple_xy_line_chart_data))\n\n\t\t\tassert.throw(function () {\n\t\t\t\tchart.do('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"X axis data label\" function behaviour with valid data\n\t * @test {SimpleXYLineChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete simple_xy_line_chart_data['default']\n\t\t\tlet chart = new SimpleXYLineChart(JSON.stringify(simple_xy_line_chart_data))\n\t\t\tchart.do('where myX as x')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': 'myX',\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['myX', ...simple_xy_line_chart_data.myX],\n\t\t\t\t\t\t['data1', ...simple_xy_line_chart_data.data1],\n\t\t\t\t\t\t['data2', ...simple_xy_line_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/types/simple-xy-line-chart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "test/charts/types/simple-xy-line-chart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/types/simple-xy-line-chart.spec.js~describe82",
    "access": null,
    "description": "Tests for SimpleXYLineChart class",
    "lineNumber": 11,
    "testTargets": [
      "SimpleXYLineChart"
    ]
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "describe83",
    "testId": 83,
    "memberof": "test/charts/types/simple-xy-line-chart.spec.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/simple-xy-line-chart.spec.js~describe82.describe83",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "SimpleXYLineChart#constructor"
    ]
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/charts/types/simple-xy-line-chart.spec.js~describe82.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/simple-xy-line-chart.spec.js~describe82.describe83.it84",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "describe85",
    "testId": 85,
    "memberof": "test/charts/types/simple-xy-line-chart.spec.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/simple-xy-line-chart.spec.js~describe82.describe85",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "SimpleXYLineChart#constructor"
    ]
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/charts/types/simple-xy-line-chart.spec.js~describe82.describe85",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/simple-xy-line-chart.spec.js~describe82.describe85.it86",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "describe87",
    "testId": 87,
    "memberof": "test/charts/types/simple-xy-line-chart.spec.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/simple-xy-line-chart.spec.js~describe82.describe87",
    "access": null,
    "description": "Test to check the do function behaviour with invalid data",
    "lineNumber": 40,
    "testTargets": [
      "AreaChart#do"
    ]
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/charts/types/simple-xy-line-chart.spec.js~describe82.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/simple-xy-line-chart.spec.js~describe82.describe87.it88",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 41
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "describe89",
    "testId": 89,
    "memberof": "test/charts/types/simple-xy-line-chart.spec.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/simple-xy-line-chart.spec.js~describe82.describe89",
    "access": null,
    "description": "Test to check the do \"X axis data label\" function behaviour with valid data",
    "lineNumber": 55,
    "testTargets": [
      "SimpleXYLineChart#do"
    ]
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/charts/types/simple-xy-line-chart.spec.js~describe82.describe89",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/simple-xy-line-chart.spec.js~describe82.describe89.it90",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 56
  },
  {
    "__docId__": 259,
    "kind": "testFile",
    "name": "test/charts/types/spline-chart.spec.js",
    "content": "import chai from 'chai'\nimport * as spline_chart_data from './spline-chart.data'\nimport SplineChart from '../../../src/charts/types/spline-chart'\n\nvar assert = chai.assert\n\n/**\n * Tests for SplineChart class\n * @test {SplineChart}\n */\ndescribe('SplineChart', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {SplineChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew SplineChart('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {SplineChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete spline_chart_data['default']\n\t\t\tnew SplineChart(JSON.stringify(spline_chart_data))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/types/spline-chart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "describe91",
    "testId": 91,
    "memberof": "test/charts/types/spline-chart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/types/spline-chart.spec.js~describe91",
    "access": null,
    "description": "Tests for SplineChart class",
    "lineNumber": 11,
    "testTargets": [
      "SplineChart"
    ]
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "test/charts/types/spline-chart.spec.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/spline-chart.spec.js~describe91.describe92",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "SplineChart#constructor"
    ]
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/charts/types/spline-chart.spec.js~describe91.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/spline-chart.spec.js~describe91.describe92.it93",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "describe94",
    "testId": 94,
    "memberof": "test/charts/types/spline-chart.spec.js~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/spline-chart.spec.js~describe91.describe94",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "SplineChart#constructor"
    ]
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/charts/types/spline-chart.spec.js~describe91.describe94",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/spline-chart.spec.js~describe91.describe94.it95",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 265,
    "kind": "testFile",
    "name": "test/charts/types/stacked-area-chart.spec.js",
    "content": "import chai from 'chai'\nimport * as stacked_area_chart_data from './stacked-area-chart.data'\nimport StackedAreaChart from '../../../src/charts/types/stacked-area-chart'\n\nvar assert = chai.assert\n\n/**\n * Tests for StackedAreaChart class\n * @test {StackedAreaChart}\n */\ndescribe('StackedAreaChart', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {StackedAreaChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew StackedAreaChart('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {StackedAreaChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete stacked_area_chart_data['default']\n\t\t\tnew StackedAreaChart(JSON.stringify(stacked_area_chart_data))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do function behaviour with invalid data\n\t * @test {StackedAreaChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tdelete stacked_area_chart_data['default']\n\t\t\tlet chart = new StackedAreaChart(JSON.stringify(stacked_area_chart_data))\n\n\t\t\tassert.throw(function () {\n\t\t\t\tchart.do('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"\" function behaviour with valid data\n\t * @test {StackedAreaChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete stacked_area_chart_data['default']\n\t\t\tlet chart = new StackedAreaChart(JSON.stringify(stacked_area_chart_data))\n\t\t\tchart.do('where data1 as area-spline')\n\t\t\tchart.do('where data2 as area')\n\t\t\tchart.do('group data1, data2')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...stacked_area_chart_data.data1], ['data2', ...stacked_area_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {\n\t\t\t\t\t\t'data1': 'area-spline',\n\t\t\t\t\t\t'data2': 'area'\n\t\t\t\t\t},\n\t\t\t\t\t'groups': [['data1', 'data2']],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/types/stacked-area-chart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "describe96",
    "testId": 96,
    "memberof": "test/charts/types/stacked-area-chart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/types/stacked-area-chart.spec.js~describe96",
    "access": null,
    "description": "Tests for StackedAreaChart class",
    "lineNumber": 11,
    "testTargets": [
      "StackedAreaChart"
    ]
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "test/charts/types/stacked-area-chart.spec.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/stacked-area-chart.spec.js~describe96.describe97",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "StackedAreaChart#constructor"
    ]
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/charts/types/stacked-area-chart.spec.js~describe96.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/stacked-area-chart.spec.js~describe96.describe97.it98",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "describe99",
    "testId": 99,
    "memberof": "test/charts/types/stacked-area-chart.spec.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/stacked-area-chart.spec.js~describe96.describe99",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "StackedAreaChart#constructor"
    ]
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/charts/types/stacked-area-chart.spec.js~describe96.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/stacked-area-chart.spec.js~describe96.describe99.it100",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "describe101",
    "testId": 101,
    "memberof": "test/charts/types/stacked-area-chart.spec.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/stacked-area-chart.spec.js~describe96.describe101",
    "access": null,
    "description": "Test to check the do function behaviour with invalid data",
    "lineNumber": 40,
    "testTargets": [
      "StackedAreaChart#do"
    ]
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/charts/types/stacked-area-chart.spec.js~describe96.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/stacked-area-chart.spec.js~describe96.describe101.it102",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 41
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "describe103",
    "testId": 103,
    "memberof": "test/charts/types/stacked-area-chart.spec.js~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/stacked-area-chart.spec.js~describe96.describe103",
    "access": null,
    "description": "Test to check the do \"\" function behaviour with valid data",
    "lineNumber": 55,
    "testTargets": [
      "StackedAreaChart#do"
    ]
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/charts/types/stacked-area-chart.spec.js~describe96.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/stacked-area-chart.spec.js~describe96.describe103.it104",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 56
  },
  {
    "__docId__": 275,
    "kind": "testFile",
    "name": "test/charts/types/stacked-bar-chart.spec.js",
    "content": "import chai from 'chai'\nimport * as stacked_bar_chart_data from './stacked-bar-chart.data'\nimport StackedBarChart from '../../../src/charts/types/stacked-bar-chart'\n\nvar assert = chai.assert\n\n/**\n * Tests for StackedBarChart class\n * @test {StackedBarChart}\n */\ndescribe('StackedBarChart', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {StackedBarChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew StackedBarChart('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {StackedBarChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete stacked_bar_chart_data['default']\n\t\t\tnew StackedBarChart(JSON.stringify(stacked_bar_chart_data))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do function behaviour with invalid data\n\t * @test {StackedBarChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tdelete stacked_bar_chart_data['default']\n\t\t\tlet chart = new StackedBarChart(JSON.stringify(stacked_bar_chart_data))\n\n\t\t\tassert.throw(function () {\n\t\t\t\tchart.do('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"\" function behaviour with valid data\n\t * @test {StackedBarChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete stacked_bar_chart_data['default']\n\t\t\tlet chart = new StackedBarChart(JSON.stringify(stacked_bar_chart_data))\n\t\t\tchart.do('group data1, data2')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...stacked_bar_chart_data.data1],\n\t\t\t\t\t\t['data2', ...stacked_bar_chart_data.data2],\n\t\t\t\t\t\t['data3', ...stacked_bar_chart_data.data3]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {},\n\t\t\t\t\t'groups': [['data1', 'data2']],\n\t\t\t\t\t'type': 'bar',\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/types/stacked-bar-chart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "describe105",
    "testId": 105,
    "memberof": "test/charts/types/stacked-bar-chart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/types/stacked-bar-chart.spec.js~describe105",
    "access": null,
    "description": "Tests for StackedBarChart class",
    "lineNumber": 11,
    "testTargets": [
      "StackedBarChart"
    ]
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "describe106",
    "testId": 106,
    "memberof": "test/charts/types/stacked-bar-chart.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/stacked-bar-chart.spec.js~describe105.describe106",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "StackedBarChart#constructor"
    ]
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/charts/types/stacked-bar-chart.spec.js~describe105.describe106",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/stacked-bar-chart.spec.js~describe105.describe106.it107",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "describe108",
    "testId": 108,
    "memberof": "test/charts/types/stacked-bar-chart.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/stacked-bar-chart.spec.js~describe105.describe108",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "StackedBarChart#constructor"
    ]
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/charts/types/stacked-bar-chart.spec.js~describe105.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/stacked-bar-chart.spec.js~describe105.describe108.it109",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "describe110",
    "testId": 110,
    "memberof": "test/charts/types/stacked-bar-chart.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/stacked-bar-chart.spec.js~describe105.describe110",
    "access": null,
    "description": "Test to check the do function behaviour with invalid data",
    "lineNumber": 40,
    "testTargets": [
      "StackedBarChart#do"
    ]
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/charts/types/stacked-bar-chart.spec.js~describe105.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/stacked-bar-chart.spec.js~describe105.describe110.it111",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 41
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "describe112",
    "testId": 112,
    "memberof": "test/charts/types/stacked-bar-chart.spec.js~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/stacked-bar-chart.spec.js~describe105.describe112",
    "access": null,
    "description": "Test to check the do \"\" function behaviour with valid data",
    "lineNumber": 55,
    "testTargets": [
      "StackedBarChart#do"
    ]
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/charts/types/stacked-bar-chart.spec.js~describe105.describe112",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/stacked-bar-chart.spec.js~describe105.describe112.it113",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 56
  },
  {
    "__docId__": 285,
    "kind": "testFile",
    "name": "test/charts/types/step-chart.spec.js",
    "content": "import chai from 'chai'\nimport * as step_chart_data from './step-chart.data'\nimport StepChart from '../../../src/charts/types/step-chart'\n\nvar assert = chai.assert\n\n/**\n * Tests for StepChart class\n * @test {StepChart}\n */\ndescribe('StepChart', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with invalid data\n\t * @test {StepChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tassert.throw(function () {\n\t\t\t\tnew StepChart('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {StepChart#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tdelete step_chart_data['default']\n\t\t\tnew StepChart(JSON.stringify(step_chart_data))\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do function behaviour with invalid data\n\t * @test {StepChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should throw an InvalidGrammarError', function () {\n\t\t\tdelete step_chart_data['default']\n\t\t\tlet chart = new StepChart(JSON.stringify(step_chart_data))\n\n\t\t\tassert.throw(function () {\n\t\t\t\tchart.do('')\n\t\t\t})\n\t\t})\n\t})\n\n\t/**\n\t * Test to check the do \"\" function behaviour with valid data\n\t * @test {StepChart#do}\n\t */\n\tdescribe('do', function () {\n\t\tit('should generate the expected JSON string', function () {\n\t\t\tdelete step_chart_data['default']\n\t\t\tlet chart = new StepChart(JSON.stringify(step_chart_data))\n\t\t\tchart.do('where data1 as step')\n\t\t\tchart.do('where data2 as area-step')\n\n\t\t\tassert.equal(JSON.stringify(chart.generateJson()), JSON.stringify({\n\t\t\t\t'size': {\n\t\t\t\t\t'height': undefined,\n\t\t\t\t\t'width': undefined\n\t\t\t\t},\n\t\t\t\t'data': {\n\t\t\t\t\t'x': undefined,\n\t\t\t\t\t'xs': {},\n\t\t\t\t\t'columns': [['data1', ...step_chart_data.data1], ['data2', ...step_chart_data.data2]],\n\t\t\t\t\t'names': {},\n\t\t\t\t\t'types': {\n\t\t\t\t\t\t'data1': 'step',\n\t\t\t\t\t\t'data2': 'area-step'\n\t\t\t\t\t},\n\t\t\t\t\t'groups': [],\n\t\t\t\t\t'type': undefined,\n\t\t\t\t\t'labels': false\n\t\t\t\t},\n\t\t\t\t'point': {\n\t\t\t\t\t'show': true\n\t\t\t\t},\n\t\t\t\t'axis': {\n\t\t\t\t\t'rotated': false,\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'label': undefined,\n\t\t\t\t\t\t'max': undefined,\n\t\t\t\t\t\t'min': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'grid': {\n\t\t\t\t\t'x': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t},\n\t\t\t\t\t'y': {\n\t\t\t\t\t\t'show': false,\n\t\t\t\t\t\t'lines': []\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'legend': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'position': 'bottom'\n\t\t\t\t},\n\t\t\t\t'tooltip': {\n\t\t\t\t\t'show': true,\n\t\t\t\t\t'grouped': true\n\t\t\t\t},\n\t\t\t\t'subchart': {\n\t\t\t\t\t'show': false\n\t\t\t\t},\n\t\t\t\t'zoom': {\n\t\t\t\t\t'enabled': false\n\t\t\t\t},\n\t\t\t\t'bar': {\n\t\t\t\t\t'width': {\n\t\t\t\t\t\t'ratio': undefined\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'donut': {\n\t\t\t\t\t'title': undefined\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t})\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/charts/types/step-chart.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "describe114",
    "testId": 114,
    "memberof": "test/charts/types/step-chart.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/charts/types/step-chart.spec.js~describe114",
    "access": null,
    "description": "Tests for StepChart class",
    "lineNumber": 11,
    "testTargets": [
      "StepChart"
    ]
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "describe115",
    "testId": 115,
    "memberof": "test/charts/types/step-chart.spec.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/step-chart.spec.js~describe114.describe115",
    "access": null,
    "description": "Test to check the constructor behaviour with invalid data",
    "lineNumber": 17,
    "testTargets": [
      "StepChart#constructor"
    ]
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/charts/types/step-chart.spec.js~describe114.describe115",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/step-chart.spec.js~describe114.describe115.it116",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 18
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "describe117",
    "testId": 117,
    "memberof": "test/charts/types/step-chart.spec.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/step-chart.spec.js~describe114.describe117",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 29,
    "testTargets": [
      "StepChart#constructor"
    ]
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/charts/types/step-chart.spec.js~describe114.describe117",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/step-chart.spec.js~describe114.describe117.it118",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 30
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/charts/types/step-chart.spec.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/step-chart.spec.js~describe114.describe119",
    "access": null,
    "description": "Test to check the do function behaviour with invalid data",
    "lineNumber": 40,
    "testTargets": [
      "StepChart#do"
    ]
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/charts/types/step-chart.spec.js~describe114.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/step-chart.spec.js~describe114.describe119.it120",
    "access": null,
    "description": "should throw an InvalidGrammarError",
    "lineNumber": 41
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "describe121",
    "testId": 121,
    "memberof": "test/charts/types/step-chart.spec.js~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "test/charts/types/step-chart.spec.js~describe114.describe121",
    "access": null,
    "description": "Test to check the do \"\" function behaviour with valid data",
    "lineNumber": 55,
    "testTargets": [
      "StepChart#do"
    ]
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/charts/types/step-chart.spec.js~describe114.describe121",
    "testDepth": 2,
    "static": true,
    "longname": "test/charts/types/step-chart.spec.js~describe114.describe121.it122",
    "access": null,
    "description": "should generate the expected JSON string",
    "lineNumber": 56
  },
  {
    "__docId__": 295,
    "kind": "testFile",
    "name": "test/errors/invalid-grammar-error.spec.js",
    "content": "import InvalidGrammarError from '../../src/errors/invalid-grammar-error'\n\n/**\n * Tests for InvalidGrammarError class\n * @test {InvalidGrammarError}\n */\ndescribe('InvalidGrammarError', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {InvalidGrammarError#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tnew InvalidGrammarError('')\n\t\t})\n\t})\n\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/errors/invalid-grammar-error.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "test/errors/invalid-grammar-error.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/errors/invalid-grammar-error.spec.js~describe123",
    "access": null,
    "description": "Tests for InvalidGrammarError class",
    "lineNumber": 7,
    "testTargets": [
      "InvalidGrammarError"
    ]
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "describe124",
    "testId": 124,
    "memberof": "test/errors/invalid-grammar-error.spec.js~describe123",
    "testDepth": 1,
    "static": true,
    "longname": "test/errors/invalid-grammar-error.spec.js~describe123.describe124",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 13,
    "testTargets": [
      "InvalidGrammarError#constructor"
    ]
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/errors/invalid-grammar-error.spec.js~describe123.describe124",
    "testDepth": 2,
    "static": true,
    "longname": "test/errors/invalid-grammar-error.spec.js~describe123.describe124.it125",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 14
  },
  {
    "__docId__": 299,
    "kind": "testFile",
    "name": "test/errors/invalid-operation-error.spec.js",
    "content": "import InvalidOperationError from '../../src/errors/invalid-operation-error'\n\n/**\n * Tests for InvalidOperationError class\n * @test {InvalidOperationError}\n */\ndescribe('InvalidOperationError', function () {\n\n\t/**\n\t * Test to check the constructor behaviour with valid data\n\t * @test {InvalidOperationError#constructor}\n\t */\n\tdescribe('constructor', function () {\n\t\tit('should do nothing', function () {\n\t\t\tnew InvalidOperationError('')\n\t\t})\n\t})\n\n})",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/errors/invalid-operation-error.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "describe126",
    "testId": 126,
    "memberof": "test/errors/invalid-operation-error.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/errors/invalid-operation-error.spec.js~describe126",
    "access": null,
    "description": "Tests for InvalidOperationError class",
    "lineNumber": 7,
    "testTargets": [
      "InvalidOperationError"
    ]
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "describe127",
    "testId": 127,
    "memberof": "test/errors/invalid-operation-error.spec.js~describe126",
    "testDepth": 1,
    "static": true,
    "longname": "test/errors/invalid-operation-error.spec.js~describe126.describe127",
    "access": null,
    "description": "Test to check the constructor behaviour with valid data",
    "lineNumber": 13,
    "testTargets": [
      "InvalidOperationError#constructor"
    ]
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/errors/invalid-operation-error.spec.js~describe126.describe127",
    "testDepth": 2,
    "static": true,
    "longname": "test/errors/invalid-operation-error.spec.js~describe126.describe127.it128",
    "access": null,
    "description": "should do nothing",
    "lineNumber": 14
  },
  {
    "__docId__": 303,
    "kind": "testFile",
    "name": "test/graph.spec.js",
    "content": "",
    "static": true,
    "longname": "/Users/ivantha/Git/GraphJS/test/graph.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  }
]